
Weather_station_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e74  08005984  08005984  00015984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067f8  080067f8  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080067f8  080067f8  000167f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006800  08006800  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006800  08006800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006804  08006804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08006808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200000a0  080068a8  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  080068a8  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010958  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ec  00000000  00000000  00030a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00033118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000215b2  00000000  00000000  00033e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001063d  00000000  00000000  00055402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c4ae0  00000000  00000000  00065a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0012a51f  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c28  00000000  00000000  0012a570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038cc  00000000  00000000  0012b198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800596c 	.word	0x0800596c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	0800596c 	.word	0x0800596c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
	ST7735_Init();
 800058a:	f000 fb39 	bl	8000c00 <ST7735_Init>
	const char ready[] = "Ready!\r\n";
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <init+0x2c>)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	ca07      	ldmia	r2, {r0, r1, r2}
 8000594:	c303      	stmia	r3!, {r0, r1}
 8000596:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
 8000598:	1d39      	adds	r1, r7, #4
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	2208      	movs	r2, #8
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <init+0x30>)
 80005a2:	f003 f983 	bl	80038ac <HAL_UART_Transmit>
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	08005984 	.word	0x08005984
 80005b4:	200001a4 	.word	0x200001a4

080005b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08c      	sub	sp, #48	; 0x30
 80005bc:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005be:	f000 ff42 	bl	8001446 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005c2:	f000 f8ad 	bl	8000720 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c6:	f000 f9ab 	bl	8000920 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005ca:	f000 f979 	bl	80008c0 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80005ce:	f000 f909 	bl	80007e4 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 80005d2:	f000 f945 	bl	8000860 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_Delay(1000);
 80005d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005da:	f000 ffa9 	bl	8001530 <HAL_Delay>
	while(ERROR == cfg_sx126x_mode(TRANSPARENT_MODE)){
 80005de:	e003      	b.n	80005e8 <main+0x30>
		HAL_Delay(500);
 80005e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e4:	f000 ffa4 	bl	8001530 <HAL_Delay>
	while(ERROR == cfg_sx126x_mode(TRANSPARENT_MODE)){
 80005e8:	2002      	movs	r0, #2
 80005ea:	f000 fe1b 	bl	8001224 <cfg_sx126x_mode>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d0f5      	beq.n	80005e0 <main+0x28>
	}
	HAL_Delay(100);
 80005f4:	2064      	movs	r0, #100	; 0x64
 80005f6:	f000 ff9b 	bl	8001530 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1,(uint8_t *)&buffer,9);
 80005fa:	2209      	movs	r2, #9
 80005fc:	493e      	ldr	r1, [pc, #248]	; (80006f8 <main+0x140>)
 80005fe:	483f      	ldr	r0, [pc, #252]	; (80006fc <main+0x144>)
 8000600:	f003 fa56 	bl	8003ab0 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	init();
 8000604:	f7ff ffbe 	bl	8000584 <init>
	ST7735_FillScreen(ST7735_BLACK);
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fc47 	bl	8000e9c <ST7735_FillScreen>
	{
		/*loop();
		ST7735_WriteString(2, 2+(2*18), "TEMP: 12C", Font_11x18, ST7735_RED, ST7735_BLACK);
		ST7735_WriteString(2, 2+(3*18), "HUM: 50%", Font_11x18, ST7735_RED, ST7735_BLACK);
		ST7735_WriteString(2, 3+(4*18), "PRES: 50PSI", Font_11x18, ST7735_RED, ST7735_BLACK);*/
		if(received){
 800060e:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <main+0x148>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d05b      	beq.n	80006ce <main+0x116>
			uint8_t read_temp[4] = "\0";
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
			uint8_t read_hum[4] = "\0";
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
			uint8_t built_message[20] = "\0";
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
			memcpy(read_temp,&buffer[0],3);
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	2203      	movs	r2, #3
 8000636:	4930      	ldr	r1, [pc, #192]	; (80006f8 <main+0x140>)
 8000638:	4618      	mov	r0, r3
 800063a:	f004 fd21 	bl	8005080 <memcpy>
			memcpy(read_hum,&buffer[4],3);
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	2203      	movs	r2, #3
 8000644:	492f      	ldr	r1, [pc, #188]	; (8000704 <main+0x14c>)
 8000646:	4618      	mov	r0, r3
 8000648:	f004 fd1a 	bl	8005080 <memcpy>
			sprintf((char*)built_message,"TEMP:%sC",(char *)read_temp);
 800064c:	f107 021c 	add.w	r2, r7, #28
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	492d      	ldr	r1, [pc, #180]	; (8000708 <main+0x150>)
 8000654:	4618      	mov	r0, r3
 8000656:	f004 fe19 	bl	800528c <siprintf>
			ST7735_WriteString(2, 2+(2*18), (char*)built_message, Font_11x18, ST7735_RED, ST7735_YELLOW);
 800065a:	4b2c      	ldr	r3, [pc, #176]	; (800070c <main+0x154>)
 800065c:	1d39      	adds	r1, r7, #4
 800065e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000662:	9202      	str	r2, [sp, #8]
 8000664:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000668:	9201      	str	r2, [sp, #4]
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	9200      	str	r2, [sp, #0]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	460a      	mov	r2, r1
 8000672:	2126      	movs	r1, #38	; 0x26
 8000674:	2002      	movs	r0, #2
 8000676:	f000 fb54 	bl	8000d22 <ST7735_WriteString>
			sprintf((char*)built_message,"HUM:%s%%",(char *)read_hum);
 800067a:	f107 0218 	add.w	r2, r7, #24
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4923      	ldr	r1, [pc, #140]	; (8000710 <main+0x158>)
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fe02 	bl	800528c <siprintf>
			ST7735_WriteString(2, 2+(4*18), (char*)built_message, Font_11x18, ST7735_RED, ST7735_YELLOW);
 8000688:	4b20      	ldr	r3, [pc, #128]	; (800070c <main+0x154>)
 800068a:	1d39      	adds	r1, r7, #4
 800068c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000690:	9202      	str	r2, [sp, #8]
 8000692:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	685a      	ldr	r2, [r3, #4]
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	460a      	mov	r2, r1
 80006a0:	214a      	movs	r1, #74	; 0x4a
 80006a2:	2002      	movs	r0, #2
 80006a4:	f000 fb3d 	bl	8000d22 <ST7735_WriteString>
			HAL_UART_Transmit(&huart2,buffer,strlen((const char *)buffer),HAL_MAX_DELAY);
 80006a8:	4813      	ldr	r0, [pc, #76]	; (80006f8 <main+0x140>)
 80006aa:	f7ff fd91 	bl	80001d0 <strlen>
 80006ae:	4603      	mov	r3, r0
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	4910      	ldr	r1, [pc, #64]	; (80006f8 <main+0x140>)
 80006b8:	4816      	ldr	r0, [pc, #88]	; (8000714 <main+0x15c>)
 80006ba:	f003 f8f7 	bl	80038ac <HAL_UART_Transmit>
			//ST7735_WriteString(2, 2+(1*18), (char*)buffer, Font_11x18, ST7735_RED, ST7735_YELLOW);
			HAL_UART_Receive_IT(&huart1,(uint8_t *)&buffer,9);
 80006be:	2209      	movs	r2, #9
 80006c0:	490d      	ldr	r1, [pc, #52]	; (80006f8 <main+0x140>)
 80006c2:	480e      	ldr	r0, [pc, #56]	; (80006fc <main+0x144>)
 80006c4:	f003 f9f4 	bl	8003ab0 <HAL_UART_Receive_IT>
			received = false;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <main+0x148>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
		}
		if(SUCCESS == over_flag){
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <main+0x160>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d19b      	bne.n	800060e <main+0x56>
			HAL_UART_Transmit_IT(&huart2,buffer,strlen((const char *)buffer));
 80006d6:	4808      	ldr	r0, [pc, #32]	; (80006f8 <main+0x140>)
 80006d8:	f7ff fd7a 	bl	80001d0 <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29b      	uxth	r3, r3
 80006e0:	461a      	mov	r2, r3
 80006e2:	4905      	ldr	r1, [pc, #20]	; (80006f8 <main+0x140>)
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <main+0x15c>)
 80006e6:	f003 f975 	bl	80039d4 <HAL_UART_Transmit_IT>
			over_flag = ERROR;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <main+0x160>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
			rece_count = 0;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <main+0x164>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
		if(received){
 80006f6:	e78a      	b.n	800060e <main+0x56>
 80006f8:	20000228 	.word	0x20000228
 80006fc:	20000120 	.word	0x20000120
 8000700:	2000028d 	.word	0x2000028d
 8000704:	2000022c 	.word	0x2000022c
 8000708:	08005990 	.word	0x08005990
 800070c:	20000000 	.word	0x20000000
 8000710:	0800599c 	.word	0x0800599c
 8000714:	200001a4 	.word	0x200001a4
 8000718:	20000009 	.word	0x20000009
 800071c:	2000000a 	.word	0x2000000a

08000720 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b096      	sub	sp, #88	; 0x58
 8000724:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2244      	movs	r2, #68	; 0x44
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f004 fcb4 	bl	800509c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000742:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000746:	f001 fa47 	bl	8001bd8 <HAL_PWREx_ControlVoltageScaling>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000750:	f000 f972 	bl	8000a38 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000754:	f001 fa22 	bl	8001b9c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <SystemClock_Config+0xc0>)
 800075a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800075e:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <SystemClock_Config+0xc0>)
 8000760:	f023 0318 	bic.w	r3, r3, #24
 8000764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000768:	2314      	movs	r3, #20
 800076a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000778:	2360      	movs	r3, #96	; 0x60
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000780:	2301      	movs	r3, #1
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000788:	2310      	movs	r3, #16
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800078c:	2307      	movs	r3, #7
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4618      	mov	r0, r3
 800079e:	f001 fa71 	bl	8001c84 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x8c>
	{
		Error_Handler();
 80007a8:	f000 f946 	bl	8000a38 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2303      	movs	r3, #3
 80007b2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	2101      	movs	r1, #1
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fe71 	bl	80024ac <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 80007d0:	f000 f932 	bl	8000a38 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80007d4:	f002 fa84 	bl	8002ce0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007d8:	bf00      	nop
 80007da:	3758      	adds	r7, #88	; 0x58
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000

080007e4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_SPI1_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_SPI1_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_SPI1_Init+0x74>)
 80007f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_SPI1_Init+0x74>)
 80007f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007fc:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI1_Init+0x74>)
 8000800:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000804:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI1_Init+0x74>)
 8000814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000818:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI1_Init+0x74>)
 800081c:	2210      	movs	r2, #16
 800081e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_SPI1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_SPI1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI1_Init+0x74>)
 8000834:	2207      	movs	r2, #7
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_SPI1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI1_Init+0x74>)
 8000840:	2208      	movs	r2, #8
 8000842:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_SPI1_Init+0x74>)
 8000846:	f002 fb4d 	bl	8002ee4 <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0x70>
	{
		Error_Handler();
 8000850:	f000 f8f2 	bl	8000a38 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000bc 	.word	0x200000bc
 800085c:	40013000 	.word	0x40013000

08000860 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_USART1_UART_Init+0x58>)
 8000866:	4a15      	ldr	r2, [pc, #84]	; (80008bc <MX_USART1_UART_Init+0x5c>)
 8000868:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_USART1_UART_Init+0x58>)
 800086c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000870:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART1_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_USART1_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART1_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART1_UART_Init+0x58>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART1_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART1_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART1_UART_Init+0x58>)
 80008a4:	f002 ffb4 	bl	8003810 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80008ae:	f000 f8c3 	bl	8000a38 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000120 	.word	0x20000120
 80008bc:	40013800 	.word	0x40013800

080008c0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008c6:	4a15      	ldr	r2, [pc, #84]	; (800091c <MX_USART2_UART_Init+0x5c>)
 80008c8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART2_UART_Init+0x58>)
 8000904:	f002 ff84 	bl	8003810 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800090e:	f000 f893 	bl	8000a38 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200001a4 	.word	0x200001a4
 800091c:	40004400 	.word	0x40004400

08000920 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <MX_GPIO_Init+0xb8>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a27      	ldr	r2, [pc, #156]	; (80009d8 <MX_GPIO_Init+0xb8>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_GPIO_Init+0xb8>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_GPIO_Init+0xb8>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a21      	ldr	r2, [pc, #132]	; (80009d8 <MX_GPIO_Init+0xb8>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_GPIO_Init+0xb8>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_GPIO_Init+0xb8>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <MX_GPIO_Init+0xb8>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_GPIO_Init+0xb8>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LoRa_M0_Pin|LoRa_M1_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2112      	movs	r1, #18
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f001 f8f1 	bl	8001b6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin|LCD_CS_Pin|LCD_RESET_Pin|LCD_AO_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2178      	movs	r1, #120	; 0x78
 800098e:	4813      	ldr	r0, [pc, #76]	; (80009dc <MX_GPIO_Init+0xbc>)
 8000990:	f001 f8ec 	bl	8001b6c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LoRa_M0_Pin LoRa_M1_Pin */
	GPIO_InitStruct.Pin = LoRa_M0_Pin|LoRa_M1_Pin;
 8000994:	2312      	movs	r3, #18
 8000996:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099c:	2301      	movs	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f000 ff73 	bl	8001898 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LCD_CS_Pin LCD_RESET_Pin LCD_AO_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LCD_CS_Pin|LCD_RESET_Pin|LCD_AO_Pin;
 80009b2:	2378      	movs	r3, #120	; 0x78
 80009b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4619      	mov	r1, r3
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_GPIO_Init+0xbc>)
 80009ca:	f000 ff65 	bl	8001898 <HAL_GPIO_Init>

}
 80009ce:	bf00      	nop
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400

080009e0 <HAL_UART_TxCpltCallback>:
 * @brief Tx Transfer completed callback.
 * @param huart UART handle.
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	transmitted = true;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <HAL_UART_TxCpltCallback+0x1c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
		flg_huart1_completed = true;
	}
	else{
		flg_huart2_completed = false;
	}*/
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2000028c 	.word	0x2000028c

08000a00 <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callback.
 * @param  huart UART handle.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	if (huart == &huart1){
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_UART_RxCpltCallback+0x2c>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d106      	bne.n	8000a1e <HAL_UART_RxCpltCallback+0x1e>
		if( SUCCESS == init_cplt_flag){
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_UART_RxCpltCallback+0x30>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <HAL_UART_RxCpltCallback+0x1e>
				over_flag = SUCCESS;
				buffer[rece_count] = 0;
			}else{
				//HAL_UART_Receive_IT(&huart1,(uint8_t *)&rece_buff,1);
			}*/
			received = true;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_UART_RxCpltCallback+0x34>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
		flg_huart1_completed = true;
	}
	else{
		flg_huart2_completed = false;
	}*/
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000120 	.word	0x20000120
 8000a30:	20000008 	.word	0x20000008
 8000a34:	2000028d 	.word	0x2000028d

08000a38 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <ST7735_Select+0x14>)
 8000a4e:	f001 f88d 	bl	8001b6c <HAL_GPIO_WritePin>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	48000400 	.word	0x48000400

08000a5c <ST7735_Unselect>:

void ST7735_Unselect() {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2110      	movs	r1, #16
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <ST7735_Unselect+0x14>)
 8000a66:	f001 f881 	bl	8001b6c <HAL_GPIO_WritePin>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	48000400 	.word	0x48000400

08000a74 <ST7735_Reset>:

static void ST7735_Reset() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	4806      	ldr	r0, [pc, #24]	; (8000a98 <ST7735_Reset+0x24>)
 8000a7e:	f001 f875 	bl	8001b6c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000a82:	2005      	movs	r0, #5
 8000a84:	f000 fd54 	bl	8001530 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <ST7735_Reset+0x24>)
 8000a8e:	f001 f86d 	bl	8001b6c <HAL_GPIO_WritePin>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	48000400 	.word	0x48000400

08000a9c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <ST7735_WriteCommand+0x2c>)
 8000aac:	f001 f85e 	bl	8001b6c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000ab0:	1df9      	adds	r1, r7, #7
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <ST7735_WriteCommand+0x30>)
 8000aba:	f002 fab6 	bl	800302a <HAL_SPI_Transmit>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	48000400 	.word	0x48000400
 8000acc:	200000bc 	.word	0x200000bc

08000ad0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2140      	movs	r1, #64	; 0x40
 8000ade:	4807      	ldr	r0, [pc, #28]	; (8000afc <ST7735_WriteData+0x2c>)
 8000ae0:	f001 f844 	bl	8001b6c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	6879      	ldr	r1, [r7, #4]
 8000aee:	4804      	ldr	r0, [pc, #16]	; (8000b00 <ST7735_WriteData+0x30>)
 8000af0:	f002 fa9b 	bl	800302a <HAL_SPI_Transmit>
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	48000400 	.word	0x48000400
 8000b00:	200000bc 	.word	0x200000bc

08000b04 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000b16:	e034      	b.n	8000b82 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000b22:	7afb      	ldrb	r3, [r7, #11]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffb9 	bl	8000a9c <ST7735_WriteCommand>

        numArgs = *addr++;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000b34:	7abb      	ldrb	r3, [r7, #10]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000b3e:	7abb      	ldrb	r3, [r7, #10]
 8000b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b44:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000b46:	7abb      	ldrb	r3, [r7, #10]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d008      	beq.n	8000b5e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000b4c:	7abb      	ldrb	r3, [r7, #10]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ffbd 	bl	8000ad0 <ST7735_WriteData>
            addr += numArgs;
 8000b56:	7abb      	ldrb	r3, [r7, #10]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000b5e:	89bb      	ldrh	r3, [r7, #12]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d00e      	beq.n	8000b82 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000b6e:	89bb      	ldrh	r3, [r7, #12]
 8000b70:	2bff      	cmp	r3, #255	; 0xff
 8000b72:	d102      	bne.n	8000b7a <ST7735_ExecuteCommandList+0x76>
 8000b74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b78:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000b7a:	89bb      	ldrh	r3, [r7, #12]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fcd7 	bl	8001530 <HAL_Delay>
    while(numCommands--) {
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	1e5a      	subs	r2, r3, #1
 8000b86:	73fa      	strb	r2, [r7, #15]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1c5      	bne.n	8000b18 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000b96:	b590      	push	{r4, r7, lr}
 8000b98:	b085      	sub	sp, #20
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4623      	mov	r3, r4
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71bb      	strb	r3, [r7, #6]
 8000bac:	460b      	mov	r3, r1
 8000bae:	717b      	strb	r3, [r7, #5]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000bb4:	202a      	movs	r0, #42	; 0x2a
 8000bb6:	f7ff ff71 	bl	8000a9c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000bba:	2300      	movs	r3, #0
 8000bbc:	733b      	strb	r3, [r7, #12]
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	737b      	strb	r3, [r7, #13]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73bb      	strb	r3, [r7, #14]
 8000bc6:	797b      	ldrb	r3, [r7, #5]
 8000bc8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	2104      	movs	r1, #4
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff7d 	bl	8000ad0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000bd6:	202b      	movs	r0, #43	; 0x2b
 8000bd8:	f7ff ff60 	bl	8000a9c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000be0:	793b      	ldrb	r3, [r7, #4]
 8000be2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	2104      	movs	r1, #4
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff70 	bl	8000ad0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000bf0:	202c      	movs	r0, #44	; 0x2c
 8000bf2:	f7ff ff53 	bl	8000a9c <ST7735_WriteCommand>
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd90      	pop	{r4, r7, pc}
	...

08000c00 <ST7735_Init>:

void ST7735_Init() {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000c04:	f7ff ff1e 	bl	8000a44 <ST7735_Select>
    ST7735_Reset();
 8000c08:	f7ff ff34 	bl	8000a74 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <ST7735_Init+0x28>)
 8000c0e:	f7ff ff79 	bl	8000b04 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <ST7735_Init+0x2c>)
 8000c14:	f7ff ff76 	bl	8000b04 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <ST7735_Init+0x30>)
 8000c1a:	f7ff ff73 	bl	8000b04 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000c1e:	f7ff ff1d 	bl	8000a5c <ST7735_Unselect>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08006704 	.word	0x08006704
 8000c2c:	08006740 	.word	0x08006740
 8000c30:	08006750 	.word	0x08006750

08000c34 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000c34:	b082      	sub	sp, #8
 8000c36:	b590      	push	{r4, r7, lr}
 8000c38:	b089      	sub	sp, #36	; 0x24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80fb      	strh	r3, [r7, #6]
 8000c42:	460b      	mov	r3, r1
 8000c44:	80bb      	strh	r3, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	b2d8      	uxtb	r0, r3
 8000c4e:	88bb      	ldrh	r3, [r7, #4]
 8000c50:	b2d9      	uxtb	r1, r3
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	b2dc      	uxtb	r4, r3
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	4622      	mov	r2, r4
 8000c74:	f7ff ff8f 	bl	8000b96 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
 8000c7c:	e043      	b.n	8000d06 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	3b20      	subs	r3, #32
 8000c84:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000c88:	fb01 f303 	mul.w	r3, r1, r3
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	440b      	add	r3, r1
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	e029      	b.n	8000cf4 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00e      	beq.n	8000cce <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000cb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000cb2:	0a1b      	lsrs	r3, r3, #8
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	743b      	strb	r3, [r7, #16]
 8000cba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff02 	bl	8000ad0 <ST7735_WriteData>
 8000ccc:	e00f      	b.n	8000cee <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000cce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000cd2:	0a1b      	lsrs	r3, r3, #8
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	733b      	strb	r3, [r7, #12]
 8000cda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fef1 	bl	8000ad0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
 8000cf4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d3cf      	bcc.n	8000ca0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	3301      	adds	r3, #1
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d3b5      	bcc.n	8000c7e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	3724      	adds	r7, #36	; 0x24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d1e:	b002      	add	sp, #8
 8000d20:	4770      	bx	lr

08000d22 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000d22:	b082      	sub	sp, #8
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af04      	add	r7, sp, #16
 8000d2a:	603a      	str	r2, [r7, #0]
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]
 8000d32:	460b      	mov	r3, r1
 8000d34:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000d36:	f7ff fe85 	bl	8000a44 <ST7735_Select>

    while(*str) {
 8000d3a:	e02d      	b.n	8000d98 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	7d3a      	ldrb	r2, [r7, #20]
 8000d40:	4413      	add	r3, r2
 8000d42:	2b9f      	cmp	r3, #159	; 0x9f
 8000d44:	dd13      	ble.n	8000d6e <ST7735_WriteString+0x4c>
            x = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000d4a:	7d7b      	ldrb	r3, [r7, #21]
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	88bb      	ldrh	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	7d7a      	ldrb	r2, [r7, #21]
 8000d58:	4413      	add	r3, r2
 8000d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d5c:	dc21      	bgt.n	8000da2 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b20      	cmp	r3, #32
 8000d64:	d103      	bne.n	8000d6e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	603b      	str	r3, [r7, #0]
                continue;
 8000d6c:	e014      	b.n	8000d98 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	781a      	ldrb	r2, [r3, #0]
 8000d72:	88b9      	ldrh	r1, [r7, #4]
 8000d74:	88f8      	ldrh	r0, [r7, #6]
 8000d76:	8c3b      	ldrh	r3, [r7, #32]
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	8bbb      	ldrh	r3, [r7, #28]
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f7ff ff56 	bl	8000c34 <ST7735_WriteChar>
        x += font.width;
 8000d88:	7d3b      	ldrb	r3, [r7, #20]
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	4413      	add	r3, r2
 8000d90:	80fb      	strh	r3, [r7, #6]
        str++;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1cd      	bne.n	8000d3c <ST7735_WriteString+0x1a>
 8000da0:	e000      	b.n	8000da4 <ST7735_WriteString+0x82>
                break;
 8000da2:	bf00      	nop
    }

    ST7735_Unselect();
 8000da4:	f7ff fe5a 	bl	8000a5c <ST7735_Unselect>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000db2:	b002      	add	sp, #8
 8000db4:	4770      	bx	lr
	...

08000db8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4623      	mov	r3, r4
 8000dc8:	80fb      	strh	r3, [r7, #6]
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80bb      	strh	r3, [r7, #4]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	807b      	strh	r3, [r7, #2]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	2b9f      	cmp	r3, #159	; 0x9f
 8000dda:	d857      	bhi.n	8000e8c <ST7735_FillRectangle+0xd4>
 8000ddc:	88bb      	ldrh	r3, [r7, #4]
 8000dde:	2b7f      	cmp	r3, #127	; 0x7f
 8000de0:	d854      	bhi.n	8000e8c <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000de2:	88fa      	ldrh	r2, [r7, #6]
 8000de4:	887b      	ldrh	r3, [r7, #2]
 8000de6:	4413      	add	r3, r2
 8000de8:	2ba0      	cmp	r3, #160	; 0xa0
 8000dea:	dd03      	ble.n	8000df4 <ST7735_FillRectangle+0x3c>
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000df2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000df4:	88ba      	ldrh	r2, [r7, #4]
 8000df6:	883b      	ldrh	r3, [r7, #0]
 8000df8:	4413      	add	r3, r2
 8000dfa:	2b80      	cmp	r3, #128	; 0x80
 8000dfc:	dd03      	ble.n	8000e06 <ST7735_FillRectangle+0x4e>
 8000dfe:	88bb      	ldrh	r3, [r7, #4]
 8000e00:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000e04:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000e06:	f7ff fe1d 	bl	8000a44 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	b2d8      	uxtb	r0, r3
 8000e0e:	88bb      	ldrh	r3, [r7, #4]
 8000e10:	b2d9      	uxtb	r1, r3
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	887b      	ldrh	r3, [r7, #2]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	b2dc      	uxtb	r4, r3
 8000e22:	88bb      	ldrh	r3, [r7, #4]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	883b      	ldrh	r3, [r7, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4622      	mov	r2, r4
 8000e34:	f7ff feaf 	bl	8000b96 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000e38:	8c3b      	ldrh	r3, [r7, #32]
 8000e3a:	0a1b      	lsrs	r3, r3, #8
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	733b      	strb	r3, [r7, #12]
 8000e42:	8c3b      	ldrh	r3, [r7, #32]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2140      	movs	r1, #64	; 0x40
 8000e4c:	4811      	ldr	r0, [pc, #68]	; (8000e94 <ST7735_FillRectangle+0xdc>)
 8000e4e:	f000 fe8d 	bl	8001b6c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000e52:	883b      	ldrh	r3, [r7, #0]
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	e013      	b.n	8000e80 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	80fb      	strh	r3, [r7, #6]
 8000e5c:	e00a      	b.n	8000e74 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000e5e:	f107 010c 	add.w	r1, r7, #12
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	2202      	movs	r2, #2
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <ST7735_FillRectangle+0xe0>)
 8000e6a:	f002 f8de 	bl	800302a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	80fb      	strh	r3, [r7, #6]
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f1      	bne.n	8000e5e <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8000e7a:	88bb      	ldrh	r3, [r7, #4]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	80bb      	strh	r3, [r7, #4]
 8000e80:	88bb      	ldrh	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1e8      	bne.n	8000e58 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8000e86:	f7ff fde9 	bl	8000a5c <ST7735_Unselect>
 8000e8a:	e000      	b.n	8000e8e <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000e8c:	bf00      	nop
}
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	48000400 	.word	0x48000400
 8000e98:	200000bc 	.word	0x200000bc

08000e9c <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af02      	add	r7, sp, #8
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	22a0      	movs	r2, #160	; 0xa0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff ff81 	bl	8000db8 <ST7735_FillRectangle>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_MspInit+0x44>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_MspInit+0x44>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_MspInit+0x44>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_MspInit+0x44>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HAL_MspInit+0x44>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <HAL_SPI_MspInit+0x8c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d130      	bne.n	8000f8c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_SPI_MspInit+0x90>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2e:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <HAL_SPI_MspInit+0x90>)
 8000f30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f34:	6613      	str	r3, [r2, #96]	; 0x60
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_SPI_MspInit+0x90>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_SPI_MspInit+0x90>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <HAL_SPI_MspInit+0x90>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_SPI_MspInit+0x90>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f5a:	23a0      	movs	r3, #160	; 0xa0
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f000 fc8e 	bl	8001898 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2023      	movs	r0, #35	; 0x23
 8000f82:	f000 fbd4 	bl	800172e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f86:	2023      	movs	r0, #35	; 0x23
 8000f88:	f000 fbed 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40013000 	.word	0x40013000
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0a0      	sub	sp, #128	; 0x80
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	2254      	movs	r2, #84	; 0x54
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 f86d 	bl	800509c <memset>
  if(huart->Instance==USART1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a4b      	ldr	r2, [pc, #300]	; (80010f4 <HAL_UART_MspInit+0x158>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d140      	bne.n	800104e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 fc8b 	bl	80028f4 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fe4:	f7ff fd28 	bl	8000a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe8:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <HAL_UART_MspInit+0x15c>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fec:	4a42      	ldr	r2, [pc, #264]	; (80010f8 <HAL_UART_MspInit+0x15c>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff4:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <HAL_UART_MspInit+0x15c>)
 8000ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <HAL_UART_MspInit+0x15c>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001004:	4a3c      	ldr	r2, [pc, #240]	; (80010f8 <HAL_UART_MspInit+0x15c>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100c:	4b3a      	ldr	r3, [pc, #232]	; (80010f8 <HAL_UART_MspInit+0x15c>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001018:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800101c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800102a:	2307      	movs	r3, #7
 800102c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f000 fc2e 	bl	8001898 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	2025      	movs	r0, #37	; 0x25
 8001042:	f000 fb74 	bl	800172e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001046:	2025      	movs	r0, #37	; 0x25
 8001048:	f000 fb8d 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800104c:	e04d      	b.n	80010ea <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a2a      	ldr	r2, [pc, #168]	; (80010fc <HAL_UART_MspInit+0x160>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d148      	bne.n	80010ea <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800105c:	2300      	movs	r3, #0
 800105e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fc45 	bl	80028f4 <HAL_RCCEx_PeriphCLKConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001070:	f7ff fce2 	bl	8000a38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001074:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_UART_MspInit+0x15c>)
 8001076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001078:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <HAL_UART_MspInit+0x15c>)
 800107a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107e:	6593      	str	r3, [r2, #88]	; 0x58
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_UART_MspInit+0x15c>)
 8001082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_UART_MspInit+0x15c>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001090:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <HAL_UART_MspInit+0x15c>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_UART_MspInit+0x15c>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80010a4:	2304      	movs	r3, #4
 80010a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b4:	2307      	movs	r3, #7
 80010b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c2:	f000 fbe9 	bl	8001898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80010d8:	2303      	movs	r3, #3
 80010da:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f000 fbd7 	bl	8001898 <HAL_GPIO_Init>
}
 80010ea:	bf00      	nop
 80010ec:	3780      	adds	r7, #128	; 0x80
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40013800 	.word	0x40013800
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40004400 	.word	0x40004400

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <NMI_Handler+0x4>

08001106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler+0x4>

08001112 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <UsageFault_Handler+0x4>

0800111e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114c:	f000 f9d0 	bl	80014f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <SPI1_IRQHandler+0x10>)
 800115a:	f002 f8d5 	bl	8003308 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000bc 	.word	0x200000bc

08001168 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <USART1_IRQHandler+0x10>)
 800116e:	f002 fcf5 	bl	8003b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000120 	.word	0x20000120

0800117c <cfg_sx126x_io>:
	.crypt_high = 				RELAY_CRYPTH_VALUE,
	.crypt_low = 					RELAY_CRYPTL_VALUE
};

void cfg_sx126x_io(uint8_t status)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
	if(CFG_REGISTER == status){
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d10f      	bne.n	80011ac <cfg_sx126x_io+0x30>
	  M0_RESET();
 800118c:	2200      	movs	r2, #0
 800118e:	2102      	movs	r1, #2
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f000 fcea 	bl	8001b6c <HAL_GPIO_WritePin>
	  M1_SET();
 8001198:	2201      	movs	r2, #1
 800119a:	2110      	movs	r1, #16
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f000 fce4 	bl	8001b6c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80011a4:	2005      	movs	r0, #5
 80011a6:	f000 f9c3 	bl	8001530 <HAL_Delay>
	}else if(SLEEP_STATUS == status){
		M0_SET();
		M1_SET();
		HAL_Delay(5);
	}
}
 80011aa:	e037      	b.n	800121c <cfg_sx126x_io+0xa0>
	}else if(NORMAL_STATUS == status){
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d10f      	bne.n	80011d2 <cfg_sx126x_io+0x56>
		M0_RESET();
 80011b2:	2200      	movs	r2, #0
 80011b4:	2102      	movs	r1, #2
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f000 fcd7 	bl	8001b6c <HAL_GPIO_WritePin>
		M1_RESET();
 80011be:	2200      	movs	r2, #0
 80011c0:	2110      	movs	r1, #16
 80011c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c6:	f000 fcd1 	bl	8001b6c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80011ca:	2005      	movs	r0, #5
 80011cc:	f000 f9b0 	bl	8001530 <HAL_Delay>
}
 80011d0:	e024      	b.n	800121c <cfg_sx126x_io+0xa0>
	}else if(WOR_STATUS == status){
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d10f      	bne.n	80011f8 <cfg_sx126x_io+0x7c>
		M0_SET();
 80011d8:	2201      	movs	r2, #1
 80011da:	2102      	movs	r1, #2
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f000 fcc4 	bl	8001b6c <HAL_GPIO_WritePin>
		M1_RESET();
 80011e4:	2200      	movs	r2, #0
 80011e6:	2110      	movs	r1, #16
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f000 fcbe 	bl	8001b6c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80011f0:	2005      	movs	r0, #5
 80011f2:	f000 f99d 	bl	8001530 <HAL_Delay>
}
 80011f6:	e011      	b.n	800121c <cfg_sx126x_io+0xa0>
	}else if(SLEEP_STATUS == status){
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d10e      	bne.n	800121c <cfg_sx126x_io+0xa0>
		M0_SET();
 80011fe:	2201      	movs	r2, #1
 8001200:	2102      	movs	r1, #2
 8001202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001206:	f000 fcb1 	bl	8001b6c <HAL_GPIO_WritePin>
		M1_SET();
 800120a:	2201      	movs	r2, #1
 800120c:	2110      	movs	r1, #16
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f000 fcab 	bl	8001b6c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001216:	2005      	movs	r0, #5
 8001218:	f000 f98a 	bl	8001530 <HAL_Delay>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <cfg_sx126x_mode>:
	
uint8_t cfg_sx126x_mode(uint8_t mode)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t flag = ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
	if(TRANSPARENT_MODE == mode){
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d113      	bne.n	8001260 <cfg_sx126x_mode+0x3c>
		cfg_sx126x_io(CFG_REGISTER);
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff ff9f 	bl	800117c <cfg_sx126x_io>
		flag = sx126x_write_register(transparent_mode);
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <cfg_sx126x_mode+0x9c>)
 8001240:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001244:	f000 f842 	bl	80012cc <sx126x_write_register>
 8001248:	4603      	mov	r3, r0
 800124a:	73fb      	strb	r3, [r7, #15]
		if(SUCCESS == flag){
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d104      	bne.n	800125c <cfg_sx126x_mode+0x38>
			cfg_sx126x_io(NORMAL_STATUS);
 8001252:	2002      	movs	r0, #2
 8001254:	f7ff ff92 	bl	800117c <cfg_sx126x_io>
			return SUCCESS;
 8001258:	2300      	movs	r3, #0
 800125a:	e02c      	b.n	80012b6 <cfg_sx126x_mode+0x92>
		}else{
			return ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e02a      	b.n	80012b6 <cfg_sx126x_mode+0x92>
		}
	}else if(RELAY_MODE == mode){
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d111      	bne.n	800128a <cfg_sx126x_mode+0x66>
		cfg_sx126x_io(CFG_REGISTER);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff ff88 	bl	800117c <cfg_sx126x_io>
		if(SUCCESS == sx126x_write_register(relay_mode)){
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <cfg_sx126x_mode+0xa0>)
 800126e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001272:	f000 f82b 	bl	80012cc <sx126x_write_register>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d104      	bne.n	8001286 <cfg_sx126x_mode+0x62>
			cfg_sx126x_io(NORMAL_STATUS);
 800127c:	2002      	movs	r0, #2
 800127e:	f7ff ff7d 	bl	800117c <cfg_sx126x_io>
			return SUCCESS;
 8001282:	2300      	movs	r3, #0
 8001284:	e017      	b.n	80012b6 <cfg_sx126x_mode+0x92>
		}else{
			return ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e015      	b.n	80012b6 <cfg_sx126x_mode+0x92>
		}
	}else if(WOR_TRANSMISSION_MODE == mode){
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b04      	cmp	r3, #4
 800128e:	d111      	bne.n	80012b4 <cfg_sx126x_mode+0x90>
		cfg_sx126x_io(CFG_REGISTER);
 8001290:	2001      	movs	r0, #1
 8001292:	f7ff ff73 	bl	800117c <cfg_sx126x_io>
		if(SUCCESS == sx126x_write_register(wor_mode)){
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <cfg_sx126x_mode+0xa4>)
 8001298:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800129c:	f000 f816 	bl	80012cc <sx126x_write_register>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d104      	bne.n	80012b0 <cfg_sx126x_mode+0x8c>
			cfg_sx126x_io(WOR_STATUS);
 80012a6:	2003      	movs	r0, #3
 80012a8:	f7ff ff68 	bl	800117c <cfg_sx126x_io>
			return SUCCESS;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e002      	b.n	80012b6 <cfg_sx126x_mode+0x92>
		}else{
			return ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <cfg_sx126x_mode+0x92>
		}
	}else{
		return ERROR;
 80012b4:	2301      	movs	r3, #1
	}
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000000c 	.word	0x2000000c
 80012c4:	20000024 	.word	0x20000024
 80012c8:	20000018 	.word	0x20000018

080012cc <sx126x_write_register>:
extern UART_HandleTypeDef huart1;
extern uint8_t buffer[MAX_BYTES];
extern uint8_t init_cplt_flag;

uint8_t sx126x_write_register(lora_para_t para)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int8_t i;
	buffer[0] = CFG_HEADER;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <sx126x_write_register+0x8c>)
 80012da:	22c2      	movs	r2, #194	; 0xc2
 80012dc:	701a      	strb	r2, [r3, #0]
	buffer[1] = REG_START;
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <sx126x_write_register+0x8c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	705a      	strb	r2, [r3, #1]
	buffer[2] = REG_NUMBER;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <sx126x_write_register+0x8c>)
 80012e6:	2209      	movs	r2, #9
 80012e8:	709a      	strb	r2, [r3, #2]
	
	for(i=3;i<12;i++){
 80012ea:	2303      	movs	r3, #3
 80012ec:	75fb      	strb	r3, [r7, #23]
 80012ee:	e00f      	b.n	8001310 <sx126x_write_register+0x44>
		buffer[i] = *(&para.address_high + i - 3);
 80012f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	1d3a      	adds	r2, r7, #4
 80012f8:	441a      	add	r2, r3
 80012fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012fe:	7811      	ldrb	r1, [r2, #0]
 8001300:	4a15      	ldr	r2, [pc, #84]	; (8001358 <sx126x_write_register+0x8c>)
 8001302:	54d1      	strb	r1, [r2, r3]
	for(i=3;i<12;i++){
 8001304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	3301      	adds	r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	75fb      	strb	r3, [r7, #23]
 8001310:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001314:	2b0b      	cmp	r3, #11
 8001316:	ddeb      	ble.n	80012f0 <sx126x_write_register+0x24>
	}
	HAL_UART_Transmit_IT(&huart1,(uint8_t *)buffer,12);
 8001318:	220c      	movs	r2, #12
 800131a:	490f      	ldr	r1, [pc, #60]	; (8001358 <sx126x_write_register+0x8c>)
 800131c:	480f      	ldr	r0, [pc, #60]	; (800135c <sx126x_write_register+0x90>)
 800131e:	f002 fb59 	bl	80039d4 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1,(uint8_t *)buffer,12);
 8001322:	220c      	movs	r2, #12
 8001324:	490c      	ldr	r1, [pc, #48]	; (8001358 <sx126x_write_register+0x8c>)
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <sx126x_write_register+0x90>)
 8001328:	f002 fbc2 	bl	8003ab0 <HAL_UART_Receive_IT>
	HAL_Delay(500);
 800132c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001330:	f000 f8fe 	bl	8001530 <HAL_Delay>
	if(CFG_RETURN == buffer[0]){
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <sx126x_write_register+0x8c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2bc1      	cmp	r3, #193	; 0xc1
 800133a:	d107      	bne.n	800134c <sx126x_write_register+0x80>
		buffer[0] = 0;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <sx126x_write_register+0x8c>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
		init_cplt_flag = SUCCESS;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <sx126x_write_register+0x94>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
		return SUCCESS;
 8001348:	2300      	movs	r3, #0
 800134a:	e000      	b.n	800134e <sx126x_write_register+0x82>
	}
	return ERROR;
 800134c:	2301      	movs	r3, #1
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000228 	.word	0x20000228
 800135c:	20000120 	.word	0x20000120
 8001360:	20000008 	.word	0x20000008

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f003 fe4a 	bl	800502c <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20010000 	.word	0x20010000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	20000290 	.word	0x20000290
 80013cc:	200002a8 	.word	0x200002a8

080013d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <SystemInit+0x20>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <SystemInit+0x20>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800142c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f8:	f7ff ffea 	bl	80013d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <LoopForever+0x6>)
  ldr r1, =_edata
 80013fe:	490d      	ldr	r1, [pc, #52]	; (8001434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <LoopForever+0xe>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001404:	e002      	b.n	800140c <LoopCopyDataInit>

08001406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140a:	3304      	adds	r3, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800140c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001410:	d3f9      	bcc.n	8001406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001414:	4c0a      	ldr	r4, [pc, #40]	; (8001440 <LoopForever+0x16>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001418:	e001      	b.n	800141e <LoopFillZerobss>

0800141a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800141c:	3204      	adds	r2, #4

0800141e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001420:	d3fb      	bcc.n	800141a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001422:	f003 fe09 	bl	8005038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001426:	f7ff f8c7 	bl	80005b8 <main>

0800142a <LoopForever>:

LoopForever:
    b LoopForever
 800142a:	e7fe      	b.n	800142a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800142c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001434:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001438:	08006808 	.word	0x08006808
  ldr r2, =_sbss
 800143c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001440:	200002a8 	.word	0x200002a8

08001444 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <ADC1_IRQHandler>

08001446 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f961 	bl	8001718 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f80e 	bl	8001478 <HAL_InitTick>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	e001      	b.n	800146c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001468:	f7ff fd2a 	bl	8000ec0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800146c:	79fb      	ldrb	r3, [r7, #7]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_InitTick+0x6c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d023      	beq.n	80014d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_InitTick+0x70>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_InitTick+0x6c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f96d 	bl	8001782 <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d809      	bhi.n	80014c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b4:	2200      	movs	r2, #0
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f000 f937 	bl	800172e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_InitTick+0x74>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e007      	b.n	80014d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e004      	b.n	80014d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	e001      	b.n	80014d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000038 	.word	0x20000038
 80014e8:	20000030 	.word	0x20000030
 80014ec:	20000034 	.word	0x20000034

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000038 	.word	0x20000038
 8001514:	20000294 	.word	0x20000294

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000294 	.word	0x20000294

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff ffee 	bl	8001518 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_Delay+0x44>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001556:	bf00      	nop
 8001558:	f7ff ffde 	bl	8001518 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000038 	.word	0x20000038

08001578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001594:	4013      	ands	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <__NVIC_GetPriorityGrouping+0x18>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	f003 0307 	and.w	r3, r3, #7
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db0b      	blt.n	8001606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	4907      	ldr	r1, [pc, #28]	; (8001614 <__NVIC_EnableIRQ+0x38>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e4:	d301      	bcc.n	80016ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00f      	b.n	800170a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <SysTick_Config+0x40>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f2:	210f      	movs	r1, #15
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f7ff ff8e 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <SysTick_Config+0x40>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SysTick_Config+0x40>)
 8001704:	2207      	movs	r2, #7
 8001706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	e000e010 	.word	0xe000e010

08001718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff29 	bl	8001578 <__NVIC_SetPriorityGrouping>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001740:	f7ff ff3e 	bl	80015c0 <__NVIC_GetPriorityGrouping>
 8001744:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	6978      	ldr	r0, [r7, #20]
 800174c:	f7ff ff8e 	bl	800166c <NVIC_EncodePriority>
 8001750:	4602      	mov	r2, r0
 8001752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff5d 	bl	8001618 <__NVIC_SetPriority>
}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff31 	bl	80015dc <__NVIC_EnableIRQ>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffa2 	bl	80016d4 <SysTick_Config>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d008      	beq.n	80017c4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2204      	movs	r2, #4
 80017b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e022      	b.n	800180a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 020e 	bic.w	r2, r2, #14
 80017d2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0201 	bic.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	f003 021c 	and.w	r2, r3, #28
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	2101      	movs	r1, #1
 80017f2:	fa01 f202 	lsl.w	r2, r1, r2
 80017f6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001808:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d005      	beq.n	800183a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2204      	movs	r2, #4
 8001832:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e029      	b.n	800188e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 020e 	bic.w	r2, r2, #14
 8001848:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0201 	bic.w	r2, r2, #1
 8001858:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f003 021c 	and.w	r2, r3, #28
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	2101      	movs	r1, #1
 8001868:	fa01 f202 	lsl.w	r2, r1, r2
 800186c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	4798      	blx	r3
    }
  }
  return status;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a6:	e148      	b.n	8001b3a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2101      	movs	r1, #1
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	fa01 f303 	lsl.w	r3, r1, r3
 80018b4:	4013      	ands	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 813a 	beq.w	8001b34 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d005      	beq.n	80018d8 <HAL_GPIO_Init+0x40>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d130      	bne.n	800193a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190e:	2201      	movs	r2, #1
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	f003 0201 	and.w	r2, r3, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b03      	cmp	r3, #3
 8001944:	d017      	beq.n	8001976 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d123      	bne.n	80019ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3208      	adds	r2, #8
 800198a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	08da      	lsrs	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3208      	adds	r2, #8
 80019c4:	6939      	ldr	r1, [r7, #16]
 80019c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0203 	and.w	r2, r3, #3
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8094 	beq.w	8001b34 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0c:	4b52      	ldr	r3, [pc, #328]	; (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a10:	4a51      	ldr	r2, [pc, #324]	; (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6613      	str	r3, [r2, #96]	; 0x60
 8001a18:	4b4f      	ldr	r3, [pc, #316]	; (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a24:	4a4d      	ldr	r2, [pc, #308]	; (8001b5c <HAL_GPIO_Init+0x2c4>)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a4e:	d00d      	beq.n	8001a6c <HAL_GPIO_Init+0x1d4>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a43      	ldr	r2, [pc, #268]	; (8001b60 <HAL_GPIO_Init+0x2c8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x1d0>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a42      	ldr	r2, [pc, #264]	; (8001b64 <HAL_GPIO_Init+0x2cc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_GPIO_Init+0x1cc>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_Init+0x1d6>
 8001a64:	2307      	movs	r3, #7
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x1d6>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x1d6>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a7e:	4937      	ldr	r1, [pc, #220]	; (8001b5c <HAL_GPIO_Init+0x2c4>)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a8c:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ab0:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ada:	4a23      	ldr	r2, [pc, #140]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b04:	4a18      	ldr	r2, [pc, #96]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3301      	adds	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f47f aeaf 	bne.w	80018a8 <HAL_GPIO_Init+0x10>
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010000 	.word	0x40010000
 8001b60:	48000400 	.word	0x48000400
 8001b64:	48000800 	.word	0x48000800
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b88:	e002      	b.n	8001b90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40007000 	.word	0x40007000

08001bbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40007000 	.word	0x40007000

08001bd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be6:	d130      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bf4:	d038      	beq.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2232      	movs	r2, #50	; 0x32
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	0c9b      	lsrs	r3, r3, #18
 8001c18:	3301      	adds	r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c1c:	e002      	b.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c30:	d102      	bne.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f2      	bne.n	8001c1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c44:	d110      	bne.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e00f      	b.n	8001c6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d007      	beq.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c60:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	20000030 	.word	0x20000030
 8001c80:	431bde83 	.word	0x431bde83

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f000 bc02 	b.w	800249c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c98:	4b96      	ldr	r3, [pc, #600]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca2:	4b94      	ldr	r3, [pc, #592]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80e4 	beq.w	8001e82 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d007      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x4c>
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	f040 808b 	bne.w	8001dde <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	f040 8087 	bne.w	8001dde <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cd0:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x64>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e3d9      	b.n	800249c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1a      	ldr	r2, [r3, #32]
 8001cec:	4b81      	ldr	r3, [pc, #516]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d004      	beq.n	8001d02 <HAL_RCC_OscConfig+0x7e>
 8001cf8:	4b7e      	ldr	r3, [pc, #504]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d00:	e005      	b.n	8001d0e <HAL_RCC_OscConfig+0x8a>
 8001d02:	4b7c      	ldr	r3, [pc, #496]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d223      	bcs.n	8001d5a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fd8c 	bl	8002834 <RCC_SetFlashLatencyFromMSIRange>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e3ba      	b.n	800249c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d26:	4b73      	ldr	r3, [pc, #460]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a72      	ldr	r2, [pc, #456]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b70      	ldr	r3, [pc, #448]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	496d      	ldr	r1, [pc, #436]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d44:	4b6b      	ldr	r3, [pc, #428]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	4968      	ldr	r1, [pc, #416]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
 8001d58:	e025      	b.n	8001da6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d5a:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a65      	ldr	r2, [pc, #404]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4960      	ldr	r1, [pc, #384]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d78:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	495b      	ldr	r1, [pc, #364]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fd4c 	bl	8002834 <RCC_SetFlashLatencyFromMSIRange>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e37a      	b.n	800249c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001da6:	f000 fc81 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	4950      	ldr	r1, [pc, #320]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001db8:	5ccb      	ldrb	r3, [r1, r3]
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc2:	4a4e      	ldr	r2, [pc, #312]	; (8001efc <HAL_RCC_OscConfig+0x278>)
 8001dc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fb54 	bl	8001478 <HAL_InitTick>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d052      	beq.n	8001e80 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	e35e      	b.n	800249c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d032      	beq.n	8001e4c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001de6:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a42      	ldr	r2, [pc, #264]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001df2:	f7ff fb91 	bl	8001518 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fb8d 	bl	8001518 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e347      	b.n	800249c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e0c:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e18:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a35      	ldr	r2, [pc, #212]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	f043 0308 	orr.w	r3, r3, #8
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4930      	ldr	r1, [pc, #192]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e36:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	492b      	ldr	r1, [pc, #172]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
 8001e4a:	e01a      	b.n	8001e82 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a28      	ldr	r2, [pc, #160]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fb5e 	bl	8001518 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e60:	f7ff fb5a 	bl	8001518 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e314      	b.n	800249c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x1dc>
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d073      	beq.n	8001f76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x21c>
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	d10e      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d063      	beq.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d15f      	bne.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e2f1      	b.n	800249c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec0:	d106      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e025      	b.n	8001f1c <HAL_RCC_OscConfig+0x298>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed8:	d114      	bne.n	8001f04 <HAL_RCC_OscConfig+0x280>
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a02      	ldr	r2, [pc, #8]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e013      	b.n	8001f1c <HAL_RCC_OscConfig+0x298>
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	0800677c 	.word	0x0800677c
 8001efc:	20000030 	.word	0x20000030
 8001f00:	20000034 	.word	0x20000034
 8001f04:	4ba0      	ldr	r3, [pc, #640]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a9f      	ldr	r2, [pc, #636]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	4b9d      	ldr	r3, [pc, #628]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a9c      	ldr	r2, [pc, #624]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d013      	beq.n	8001f4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff faf8 	bl	8001518 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7ff faf4 	bl	8001518 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e2ae      	b.n	800249c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f3e:	4b92      	ldr	r3, [pc, #584]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x2a8>
 8001f4a:	e014      	b.n	8001f76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fae4 	bl	8001518 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7ff fae0 	bl	8001518 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e29a      	b.n	800249c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f66:	4b88      	ldr	r3, [pc, #544]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2d0>
 8001f72:	e000      	b.n	8001f76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d060      	beq.n	8002044 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_OscConfig+0x310>
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	d119      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d116      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f94:	4b7c      	ldr	r3, [pc, #496]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_OscConfig+0x328>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e277      	b.n	800249c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b76      	ldr	r3, [pc, #472]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	4973      	ldr	r1, [pc, #460]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc0:	e040      	b.n	8002044 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d023      	beq.n	8002012 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fca:	4b6f      	ldr	r3, [pc, #444]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a6e      	ldr	r2, [pc, #440]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fa9f 	bl	8001518 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fde:	f7ff fa9b 	bl	8001518 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e255      	b.n	800249c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff0:	4b65      	ldr	r3, [pc, #404]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b62      	ldr	r3, [pc, #392]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	495f      	ldr	r1, [pc, #380]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
 8002010:	e018      	b.n	8002044 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002012:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a5c      	ldr	r2, [pc, #368]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff fa7b 	bl	8001518 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff fa77 	bl	8001518 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e231      	b.n	800249c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002038:	4b53      	ldr	r3, [pc, #332]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d03c      	beq.n	80020ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01c      	beq.n	8002092 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002058:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800205a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205e:	4a4a      	ldr	r2, [pc, #296]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7ff fa56 	bl	8001518 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002070:	f7ff fa52 	bl	8001518 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e20c      	b.n	800249c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ef      	beq.n	8002070 <HAL_RCC_OscConfig+0x3ec>
 8002090:	e01b      	b.n	80020ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002092:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002098:	4a3b      	ldr	r2, [pc, #236]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7ff fa39 	bl	8001518 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020aa:	f7ff fa35 	bl	8001518 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e1ef      	b.n	800249c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020bc:	4b32      	ldr	r3, [pc, #200]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ef      	bne.n	80020aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80a6 	beq.w	8002224 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d8:	2300      	movs	r3, #0
 80020da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020dc:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10d      	bne.n	8002104 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e8:	4b27      	ldr	r3, [pc, #156]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	4a26      	ldr	r2, [pc, #152]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 80020ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f2:	6593      	str	r3, [r2, #88]	; 0x58
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002100:	2301      	movs	r3, #1
 8002102:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_RCC_OscConfig+0x508>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d118      	bne.n	8002142 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_RCC_OscConfig+0x508>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_RCC_OscConfig+0x508>)
 8002116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211c:	f7ff f9fc 	bl	8001518 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002124:	f7ff f9f8 	bl	8001518 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1b2      	b.n	800249c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_RCC_OscConfig+0x508>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d108      	bne.n	800215c <HAL_RCC_OscConfig+0x4d8>
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800215a:	e029      	b.n	80021b0 <HAL_RCC_OscConfig+0x52c>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b05      	cmp	r3, #5
 8002162:	d115      	bne.n	8002190 <HAL_RCC_OscConfig+0x50c>
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	4a03      	ldr	r2, [pc, #12]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002184:	e014      	b.n	80021b0 <HAL_RCC_OscConfig+0x52c>
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
 8002190:	4b9a      	ldr	r3, [pc, #616]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	4a99      	ldr	r2, [pc, #612]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021a0:	4b96      	ldr	r3, [pc, #600]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	4a95      	ldr	r2, [pc, #596]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d016      	beq.n	80021e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b8:	f7ff f9ae 	bl	8001518 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7ff f9aa 	bl	8001518 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e162      	b.n	800249c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d6:	4b89      	ldr	r3, [pc, #548]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ed      	beq.n	80021c0 <HAL_RCC_OscConfig+0x53c>
 80021e4:	e015      	b.n	8002212 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e6:	f7ff f997 	bl	8001518 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7ff f993 	bl	8001518 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e14b      	b.n	800249c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002204:	4b7d      	ldr	r3, [pc, #500]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1ed      	bne.n	80021ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002212:	7ffb      	ldrb	r3, [r7, #31]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002218:	4b78      	ldr	r3, [pc, #480]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	4a77      	ldr	r2, [pc, #476]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 800221e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002222:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d03c      	beq.n	80022aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01c      	beq.n	8002272 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002238:	4b70      	ldr	r3, [pc, #448]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 800223a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800223e:	4a6f      	ldr	r2, [pc, #444]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002248:	f7ff f966 	bl	8001518 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002250:	f7ff f962 	bl	8001518 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e11c      	b.n	800249c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002262:	4b66      	ldr	r3, [pc, #408]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 8002264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ef      	beq.n	8002250 <HAL_RCC_OscConfig+0x5cc>
 8002270:	e01b      	b.n	80022aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002272:	4b62      	ldr	r3, [pc, #392]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 8002274:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002278:	4a60      	ldr	r2, [pc, #384]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7ff f949 	bl	8001518 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800228a:	f7ff f945 	bl	8001518 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e0ff      	b.n	800249c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800229c:	4b57      	ldr	r3, [pc, #348]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 800229e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ef      	bne.n	800228a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 80f3 	beq.w	800249a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	f040 80c9 	bne.w	8002450 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022be:	4b4f      	ldr	r3, [pc, #316]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 0203 	and.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d12c      	bne.n	800232c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	3b01      	subs	r3, #1
 80022de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d123      	bne.n	800232c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d11b      	bne.n	800232c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d113      	bne.n	800232c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	085b      	lsrs	r3, r3, #1
 8002310:	3b01      	subs	r3, #1
 8002312:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d109      	bne.n	800232c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	085b      	lsrs	r3, r3, #1
 8002324:	3b01      	subs	r3, #1
 8002326:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d06b      	beq.n	8002404 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d062      	beq.n	80023f8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002332:	4b32      	ldr	r3, [pc, #200]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0ac      	b.n	800249c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002342:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a2d      	ldr	r2, [pc, #180]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 8002348:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800234c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800234e:	f7ff f8e3 	bl	8001518 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002356:	f7ff f8df 	bl	8001518 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e099      	b.n	800249c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002368:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f0      	bne.n	8002356 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002374:	4b21      	ldr	r3, [pc, #132]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_RCC_OscConfig+0x77c>)
 800237a:	4013      	ands	r3, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002384:	3a01      	subs	r2, #1
 8002386:	0112      	lsls	r2, r2, #4
 8002388:	4311      	orrs	r1, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800238e:	0212      	lsls	r2, r2, #8
 8002390:	4311      	orrs	r1, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002396:	0852      	lsrs	r2, r2, #1
 8002398:	3a01      	subs	r2, #1
 800239a:	0552      	lsls	r2, r2, #21
 800239c:	4311      	orrs	r1, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023a2:	0852      	lsrs	r2, r2, #1
 80023a4:	3a01      	subs	r2, #1
 80023a6:	0652      	lsls	r2, r2, #25
 80023a8:	4311      	orrs	r1, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023ae:	06d2      	lsls	r2, r2, #27
 80023b0:	430a      	orrs	r2, r1
 80023b2:	4912      	ldr	r1, [pc, #72]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 80023be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023c4:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a0c      	ldr	r2, [pc, #48]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 80023ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023d0:	f7ff f8a2 	bl	8001518 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d8:	f7ff f89e 	bl	8001518 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e058      	b.n	800249c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023f6:	e050      	b.n	800249a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e04f      	b.n	800249c <HAL_RCC_OscConfig+0x818>
 80023fc:	40021000 	.word	0x40021000
 8002400:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <HAL_RCC_OscConfig+0x820>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d144      	bne.n	800249a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_RCC_OscConfig+0x820>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <HAL_RCC_OscConfig+0x820>)
 8002416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <HAL_RCC_OscConfig+0x820>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a20      	ldr	r2, [pc, #128]	; (80024a4 <HAL_RCC_OscConfig+0x820>)
 8002422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002426:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002428:	f7ff f876 	bl	8001518 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7ff f872 	bl	8001518 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e02c      	b.n	800249c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <HAL_RCC_OscConfig+0x820>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x7ac>
 800244e:	e024      	b.n	800249a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d01f      	beq.n	8002496 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <HAL_RCC_OscConfig+0x820>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <HAL_RCC_OscConfig+0x820>)
 800245c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7ff f859 	bl	8001518 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246a:	f7ff f855 	bl	8001518 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e00f      	b.n	800249c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_OscConfig+0x820>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_RCC_OscConfig+0x820>)
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	4905      	ldr	r1, [pc, #20]	; (80024a4 <HAL_RCC_OscConfig+0x820>)
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_OscConfig+0x824>)
 8002490:	4013      	ands	r3, r2
 8002492:	60cb      	str	r3, [r1, #12]
 8002494:	e001      	b.n	800249a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	feeefffc 	.word	0xfeeefffc

080024ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0e7      	b.n	8002690 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b75      	ldr	r3, [pc, #468]	; (8002698 <HAL_RCC_ClockConfig+0x1ec>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d910      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b72      	ldr	r3, [pc, #456]	; (8002698 <HAL_RCC_ClockConfig+0x1ec>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 0207 	bic.w	r2, r3, #7
 80024d6:	4970      	ldr	r1, [pc, #448]	; (8002698 <HAL_RCC_ClockConfig+0x1ec>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b6e      	ldr	r3, [pc, #440]	; (8002698 <HAL_RCC_ClockConfig+0x1ec>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0cf      	b.n	8002690 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	4b66      	ldr	r3, [pc, #408]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002508:	429a      	cmp	r2, r3
 800250a:	d908      	bls.n	800251e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800250c:	4b63      	ldr	r3, [pc, #396]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4960      	ldr	r1, [pc, #384]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d04c      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002532:	4b5a      	ldr	r3, [pc, #360]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d121      	bne.n	8002582 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e0a6      	b.n	8002690 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254a:	4b54      	ldr	r3, [pc, #336]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d115      	bne.n	8002582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e09a      	b.n	8002690 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002562:	4b4e      	ldr	r3, [pc, #312]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e08e      	b.n	8002690 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002572:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e086      	b.n	8002690 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002582:	4b46      	ldr	r3, [pc, #280]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f023 0203 	bic.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4943      	ldr	r1, [pc, #268]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	4313      	orrs	r3, r2
 8002592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002594:	f7fe ffc0 	bl	8001518 <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259c:	f7fe ffbc 	bl	8001518 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e06e      	b.n	8002690 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	4b3a      	ldr	r3, [pc, #232]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 020c 	and.w	r2, r3, #12
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d1eb      	bne.n	800259c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d010      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	4b31      	ldr	r3, [pc, #196]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025dc:	429a      	cmp	r2, r3
 80025de:	d208      	bcs.n	80025f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e0:	4b2e      	ldr	r3, [pc, #184]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	492b      	ldr	r1, [pc, #172]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f2:	4b29      	ldr	r3, [pc, #164]	; (8002698 <HAL_RCC_ClockConfig+0x1ec>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d210      	bcs.n	8002622 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002600:	4b25      	ldr	r3, [pc, #148]	; (8002698 <HAL_RCC_ClockConfig+0x1ec>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 0207 	bic.w	r2, r3, #7
 8002608:	4923      	ldr	r1, [pc, #140]	; (8002698 <HAL_RCC_ClockConfig+0x1ec>)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <HAL_RCC_ClockConfig+0x1ec>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e036      	b.n	8002690 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800262e:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4918      	ldr	r1, [pc, #96]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 800263c:	4313      	orrs	r3, r2
 800263e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4910      	ldr	r1, [pc, #64]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 800265c:	4313      	orrs	r3, r2
 800265e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002660:	f000 f824 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_RCC_ClockConfig+0x1f0>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	490b      	ldr	r1, [pc, #44]	; (80026a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002672:	5ccb      	ldrb	r3, [r1, r3]
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
 800267c:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1f8>)
 800267e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fef7 	bl	8001478 <HAL_InitTick>
 800268a:	4603      	mov	r3, r0
 800268c:	72fb      	strb	r3, [r7, #11]

  return status;
 800268e:	7afb      	ldrb	r3, [r7, #11]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40022000 	.word	0x40022000
 800269c:	40021000 	.word	0x40021000
 80026a0:	0800677c 	.word	0x0800677c
 80026a4:	20000030 	.word	0x20000030
 80026a8:	20000034 	.word	0x20000034

080026ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ba:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c4:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x34>
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d121      	bne.n	800271e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d11e      	bne.n	800271e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026e0:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026ec:	4b31      	ldr	r3, [pc, #196]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	e005      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026fc:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002708:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002710:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10d      	bne.n	8002734 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800271c:	e00a      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d102      	bne.n	800272a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002724:	4b25      	ldr	r3, [pc, #148]	; (80027bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	e004      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d101      	bne.n	8002734 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002732:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d134      	bne.n	80027a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d003      	beq.n	8002752 <HAL_RCC_GetSysClockFreq+0xa6>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d003      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0xac>
 8002750:	e005      	b.n	800275e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002754:	617b      	str	r3, [r7, #20]
      break;
 8002756:	e005      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800275a:	617b      	str	r3, [r7, #20]
      break;
 800275c:	e002      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	617b      	str	r3, [r7, #20]
      break;
 8002762:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	3301      	adds	r3, #1
 8002770:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	fb03 f202 	mul.w	r2, r3, r2
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	0e5b      	lsrs	r3, r3, #25
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	3301      	adds	r3, #1
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027a4:	69bb      	ldr	r3, [r7, #24]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3724      	adds	r7, #36	; 0x24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	08006794 	.word	0x08006794
 80027bc:	00f42400 	.word	0x00f42400
 80027c0:	007a1200 	.word	0x007a1200

080027c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000030 	.word	0x20000030

080027dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027e0:	f7ff fff0 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4904      	ldr	r1, [pc, #16]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	0800678c 	.word	0x0800678c

08002808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800280c:	f7ff ffda 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 8002810:	4602      	mov	r2, r0
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	0adb      	lsrs	r3, r3, #11
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	4904      	ldr	r1, [pc, #16]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800281e:	5ccb      	ldrb	r3, [r1, r3]
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	0800678c 	.word	0x0800678c

08002834 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002840:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800284c:	f7ff f9b6 	bl	8001bbc <HAL_PWREx_GetVoltageRange>
 8002850:	6178      	str	r0, [r7, #20]
 8002852:	e014      	b.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002858:	4a24      	ldr	r2, [pc, #144]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800285a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285e:	6593      	str	r3, [r2, #88]	; 0x58
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800286c:	f7ff f9a6 	bl	8001bbc <HAL_PWREx_GetVoltageRange>
 8002870:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	4a1d      	ldr	r2, [pc, #116]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002884:	d10b      	bne.n	800289e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d919      	bls.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2ba0      	cmp	r3, #160	; 0xa0
 8002890:	d902      	bls.n	8002898 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002892:	2302      	movs	r3, #2
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	e013      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002898:	2301      	movs	r3, #1
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	e010      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b80      	cmp	r3, #128	; 0x80
 80028a2:	d902      	bls.n	80028aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028a4:	2303      	movs	r3, #3
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	e00a      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b80      	cmp	r3, #128	; 0x80
 80028ae:	d102      	bne.n	80028b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028b0:	2302      	movs	r3, #2
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	e004      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b70      	cmp	r3, #112	; 0x70
 80028ba:	d101      	bne.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028bc:	2301      	movs	r3, #1
 80028be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 0207 	bic.w	r2, r3, #7
 80028c8:	4909      	ldr	r1, [pc, #36]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d001      	beq.n	80028e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40022000 	.word	0x40022000

080028f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028fc:	2300      	movs	r3, #0
 80028fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002900:	2300      	movs	r3, #0
 8002902:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800290c:	2b00      	cmp	r3, #0
 800290e:	d031      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002914:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002918:	d01a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800291a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800291e:	d814      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d009      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002928:	d10f      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800292a:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	4a5c      	ldr	r2, [pc, #368]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002934:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002936:	e00c      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f9de 	bl	8002d00 <RCCEx_PLLSAI1_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002948:	e003      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	74fb      	strb	r3, [r7, #19]
      break;
 800294e:	e000      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002952:	7cfb      	ldrb	r3, [r7, #19]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10b      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002958:	4b51      	ldr	r3, [pc, #324]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	494e      	ldr	r1, [pc, #312]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800296e:	e001      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 809e 	beq.w	8002abe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002982:	2300      	movs	r3, #0
 8002984:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002986:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002996:	2300      	movs	r3, #0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00d      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299c:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	4a3f      	ldr	r2, [pc, #252]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a6:	6593      	str	r3, [r2, #88]	; 0x58
 80029a8:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b4:	2301      	movs	r3, #1
 80029b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b8:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a39      	ldr	r2, [pc, #228]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80029be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029c4:	f7fe fda8 	bl	8001518 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029ca:	e009      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029cc:	f7fe fda4 	bl	8001518 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d902      	bls.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	74fb      	strb	r3, [r7, #19]
        break;
 80029de:	e005      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ef      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d15a      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01e      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d019      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a1a:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a30:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a3a:	4a19      	ldr	r2, [pc, #100]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d016      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fd64 	bl	8001518 <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a52:	e00b      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe fd60 	bl	8001518 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d902      	bls.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	74fb      	strb	r3, [r7, #19]
            break;
 8002a6a:	e006      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0ec      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10b      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8e:	4904      	ldr	r1, [pc, #16]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a96:	e009      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a98:	7cfb      	ldrb	r3, [r7, #19]
 8002a9a:	74bb      	strb	r3, [r7, #18]
 8002a9c:	e006      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aac:	7c7b      	ldrb	r3, [r7, #17]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab2:	4b8a      	ldr	r3, [pc, #552]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	4a89      	ldr	r2, [pc, #548]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aca:	4b84      	ldr	r3, [pc, #528]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad0:	f023 0203 	bic.w	r2, r3, #3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4980      	ldr	r1, [pc, #512]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aec:	4b7b      	ldr	r3, [pc, #492]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af2:	f023 020c 	bic.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	4978      	ldr	r1, [pc, #480]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b0e:	4b73      	ldr	r3, [pc, #460]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	496f      	ldr	r1, [pc, #444]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b30:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3e:	4967      	ldr	r1, [pc, #412]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b52:	4b62      	ldr	r3, [pc, #392]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	495e      	ldr	r1, [pc, #376]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b74:	4b59      	ldr	r3, [pc, #356]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	4956      	ldr	r1, [pc, #344]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b96:	4b51      	ldr	r3, [pc, #324]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	494d      	ldr	r1, [pc, #308]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d028      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bb8:	4b48      	ldr	r3, [pc, #288]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4945      	ldr	r1, [pc, #276]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bd6:	d106      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd8:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a3f      	ldr	r2, [pc, #252]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002be2:	60d3      	str	r3, [r2, #12]
 8002be4:	e011      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bee:	d10c      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f882 	bl	8002d00 <RCCEx_PLLSAI1_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002c06:	7cfb      	ldrb	r3, [r7, #19]
 8002c08:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d028      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c16:	4b31      	ldr	r3, [pc, #196]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	492d      	ldr	r1, [pc, #180]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c34:	d106      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c36:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	4a28      	ldr	r2, [pc, #160]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c40:	60d3      	str	r3, [r2, #12]
 8002c42:	e011      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2101      	movs	r1, #1
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 f853 	bl	8002d00 <RCCEx_PLLSAI1_Config>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c5e:	7cfb      	ldrb	r3, [r7, #19]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01c      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c74:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c82:	4916      	ldr	r1, [pc, #88]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c92:	d10c      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3304      	adds	r3, #4
 8002c98:	2102      	movs	r1, #2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f830 	bl	8002d00 <RCCEx_PLLSAI1_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cba:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc8:	4904      	ldr	r1, [pc, #16]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002cea:	f043 0304 	orr.w	r3, r3, #4
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000

08002d00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d0e:	4b74      	ldr	r3, [pc, #464]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d018      	beq.n	8002d4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d1a:	4b71      	ldr	r3, [pc, #452]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0203 	and.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d10d      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d32:	4b6b      	ldr	r3, [pc, #428]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
       ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d047      	beq.n	8002dd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
 8002d4a:	e044      	b.n	8002dd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d018      	beq.n	8002d86 <RCCEx_PLLSAI1_Config+0x86>
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d825      	bhi.n	8002da4 <RCCEx_PLLSAI1_Config+0xa4>
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d002      	beq.n	8002d62 <RCCEx_PLLSAI1_Config+0x62>
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d009      	beq.n	8002d74 <RCCEx_PLLSAI1_Config+0x74>
 8002d60:	e020      	b.n	8002da4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d62:	4b5f      	ldr	r3, [pc, #380]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d11d      	bne.n	8002daa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d72:	e01a      	b.n	8002daa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d74:	4b5a      	ldr	r3, [pc, #360]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d116      	bne.n	8002dae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d84:	e013      	b.n	8002dae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d86:	4b56      	ldr	r3, [pc, #344]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d92:	4b53      	ldr	r3, [pc, #332]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002da2:	e006      	b.n	8002db2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      break;
 8002da8:	e004      	b.n	8002db4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002daa:	bf00      	nop
 8002dac:	e002      	b.n	8002db4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dae:	bf00      	nop
 8002db0:	e000      	b.n	8002db4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002db2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10d      	bne.n	8002dd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dba:	4b49      	ldr	r3, [pc, #292]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	4943      	ldr	r1, [pc, #268]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d17c      	bne.n	8002ed6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ddc:	4b40      	ldr	r3, [pc, #256]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a3f      	ldr	r2, [pc, #252]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002de2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de8:	f7fe fb96 	bl	8001518 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dee:	e009      	b.n	8002e04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002df0:	f7fe fb92 	bl	8001518 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d902      	bls.n	8002e04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	73fb      	strb	r3, [r7, #15]
        break;
 8002e02:	e005      	b.n	8002e10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e04:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ef      	bne.n	8002df0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d15f      	bne.n	8002ed6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d110      	bne.n	8002e3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e1c:	4b30      	ldr	r3, [pc, #192]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6892      	ldr	r2, [r2, #8]
 8002e2c:	0211      	lsls	r1, r2, #8
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68d2      	ldr	r2, [r2, #12]
 8002e32:	06d2      	lsls	r2, r2, #27
 8002e34:	430a      	orrs	r2, r1
 8002e36:	492a      	ldr	r1, [pc, #168]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	610b      	str	r3, [r1, #16]
 8002e3c:	e027      	b.n	8002e8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d112      	bne.n	8002e6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e44:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6892      	ldr	r2, [r2, #8]
 8002e54:	0211      	lsls	r1, r2, #8
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6912      	ldr	r2, [r2, #16]
 8002e5a:	0852      	lsrs	r2, r2, #1
 8002e5c:	3a01      	subs	r2, #1
 8002e5e:	0552      	lsls	r2, r2, #21
 8002e60:	430a      	orrs	r2, r1
 8002e62:	491f      	ldr	r1, [pc, #124]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	610b      	str	r3, [r1, #16]
 8002e68:	e011      	b.n	8002e8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6892      	ldr	r2, [r2, #8]
 8002e7a:	0211      	lsls	r1, r2, #8
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6952      	ldr	r2, [r2, #20]
 8002e80:	0852      	lsrs	r2, r2, #1
 8002e82:	3a01      	subs	r2, #1
 8002e84:	0652      	lsls	r2, r2, #25
 8002e86:	430a      	orrs	r2, r1
 8002e88:	4915      	ldr	r1, [pc, #84]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a13      	ldr	r2, [pc, #76]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7fe fb3d 	bl	8001518 <HAL_GetTick>
 8002e9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ea0:	e009      	b.n	8002eb6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ea2:	f7fe fb39 	bl	8001518 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d902      	bls.n	8002eb6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	73fb      	strb	r3, [r7, #15]
          break;
 8002eb4:	e005      	b.n	8002ec2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0ef      	beq.n	8002ea2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d106      	bne.n	8002ed6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	4903      	ldr	r1, [pc, #12]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e095      	b.n	8003022 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d108      	bne.n	8002f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f06:	d009      	beq.n	8002f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
 8002f0e:	e005      	b.n	8002f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd ffe6 	bl	8000f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f5c:	d902      	bls.n	8002f64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	e002      	b.n	8002f6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f72:	d007      	beq.n	8002f84 <HAL_SPI_Init+0xa0>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f7c:	d002      	beq.n	8002f84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	ea42 0103 	orr.w	r1, r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	f003 0204 	and.w	r2, r3, #4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003000:	ea42 0103 	orr.w	r1, r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b088      	sub	sp, #32
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_SPI_Transmit+0x22>
 8003048:	2302      	movs	r3, #2
 800304a:	e158      	b.n	80032fe <HAL_SPI_Transmit+0x2d4>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003054:	f7fe fa60 	bl	8001518 <HAL_GetTick>
 8003058:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d002      	beq.n	8003070 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800306a:	2302      	movs	r3, #2
 800306c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800306e:	e13d      	b.n	80032ec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_SPI_Transmit+0x52>
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d102      	bne.n	8003082 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003080:	e134      	b.n	80032ec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2203      	movs	r2, #3
 8003086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	88fa      	ldrh	r2, [r7, #6]
 800309a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	88fa      	ldrh	r2, [r7, #6]
 80030a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030cc:	d10f      	bne.n	80030ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	d007      	beq.n	800310c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800310a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003114:	d94b      	bls.n	80031ae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_SPI_Transmit+0xfa>
 800311e:	8afb      	ldrh	r3, [r7, #22]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d13e      	bne.n	80031a2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	881a      	ldrh	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	1c9a      	adds	r2, r3, #2
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003148:	e02b      	b.n	80031a2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b02      	cmp	r3, #2
 8003156:	d112      	bne.n	800317e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	1c9a      	adds	r2, r3, #2
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800317c:	e011      	b.n	80031a2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800317e:	f7fe f9cb 	bl	8001518 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d803      	bhi.n	8003196 <HAL_SPI_Transmit+0x16c>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d102      	bne.n	800319c <HAL_SPI_Transmit+0x172>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d102      	bne.n	80031a2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031a0:	e0a4      	b.n	80032ec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1ce      	bne.n	800314a <HAL_SPI_Transmit+0x120>
 80031ac:	e07c      	b.n	80032a8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_SPI_Transmit+0x192>
 80031b6:	8afb      	ldrh	r3, [r7, #22]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d170      	bne.n	800329e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d912      	bls.n	80031ec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	881a      	ldrh	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	1c9a      	adds	r2, r3, #2
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b02      	subs	r3, #2
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031ea:	e058      	b.n	800329e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	330c      	adds	r3, #12
 80031f6:	7812      	ldrb	r2, [r2, #0]
 80031f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003212:	e044      	b.n	800329e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b02      	cmp	r3, #2
 8003220:	d12b      	bne.n	800327a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d912      	bls.n	8003252 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	881a      	ldrh	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	1c9a      	adds	r2, r3, #2
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b02      	subs	r3, #2
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003250:	e025      	b.n	800329e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	7812      	ldrb	r2, [r2, #0]
 800325e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003278:	e011      	b.n	800329e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800327a:	f7fe f94d 	bl	8001518 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d803      	bhi.n	8003292 <HAL_SPI_Transmit+0x268>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d102      	bne.n	8003298 <HAL_SPI_Transmit+0x26e>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800329c:	e026      	b.n	80032ec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1b5      	bne.n	8003214 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	6839      	ldr	r1, [r7, #0]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 fa69 	bl	8003784 <SPI_EndRxTxTransaction>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e000      	b.n	80032ec <HAL_SPI_Transmit+0x2c2>
  }

error:
 80032ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	099b      	lsrs	r3, r3, #6
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10f      	bne.n	800334c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	099b      	lsrs	r3, r3, #6
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d004      	beq.n	800334c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
    return;
 800334a:	e0d7      	b.n	80034fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_SPI_IRQHandler+0x66>
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	09db      	lsrs	r3, r3, #7
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d004      	beq.n	800336e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
    return;
 800336c:	e0c6      	b.n	80034fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_SPI_IRQHandler+0x8c>
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	099b      	lsrs	r3, r3, #6
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80b4 	beq.w	80034fc <HAL_SPI_IRQHandler+0x1f4>
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80ad 	beq.w	80034fc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d023      	beq.n	80033f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d011      	beq.n	80033de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033be:	f043 0204 	orr.w	r2, r3, #4
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	e00b      	b.n	80033f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	693b      	ldr	r3, [r7, #16]
        return;
 80033f4:	e082      	b.n	80034fc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d014      	beq.n	800342c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00c      	beq.n	8003452 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343c:	f043 0208 	orr.w	r2, r3, #8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003444:	2300      	movs	r3, #0
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003456:	2b00      	cmp	r3, #0
 8003458:	d04f      	beq.n	80034fa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003468:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <HAL_SPI_IRQHandler+0x17e>
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d034      	beq.n	80034f0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0203 	bic.w	r2, r2, #3
 8003494:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349a:	2b00      	cmp	r3, #0
 800349c:	d011      	beq.n	80034c2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a2:	4a18      	ldr	r2, [pc, #96]	; (8003504 <HAL_SPI_IRQHandler+0x1fc>)
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe f9b3 	bl	8001816 <HAL_DMA_Abort_IT>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	4a0d      	ldr	r2, [pc, #52]	; (8003504 <HAL_SPI_IRQHandler+0x1fc>)
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe f99d 	bl	8001816 <HAL_DMA_Abort_IT>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80034ee:	e003      	b.n	80034f8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f809 	bl	8003508 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80034f6:	e000      	b.n	80034fa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80034f8:	bf00      	nop
    return;
 80034fa:	bf00      	nop
  }
}
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	0800351d 	.word	0x0800351d

08003508 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff ffe5 	bl	8003508 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003558:	f7fd ffde 	bl	8001518 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	4413      	add	r3, r2
 8003566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003568:	f7fd ffd6 	bl	8001518 <HAL_GetTick>
 800356c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800356e:	4b39      	ldr	r3, [pc, #228]	; (8003654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	015b      	lsls	r3, r3, #5
 8003574:	0d1b      	lsrs	r3, r3, #20
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	fb02 f303 	mul.w	r3, r2, r3
 800357c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800357e:	e054      	b.n	800362a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003586:	d050      	beq.n	800362a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003588:	f7fd ffc6 	bl	8001518 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	429a      	cmp	r2, r3
 8003596:	d902      	bls.n	800359e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d13d      	bne.n	800361a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b6:	d111      	bne.n	80035dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c0:	d004      	beq.n	80035cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ca:	d107      	bne.n	80035dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e4:	d10f      	bne.n	8003606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e017      	b.n	800364a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3b01      	subs	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4013      	ands	r3, r2
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	bf0c      	ite	eq
 800363a:	2301      	moveq	r3, #1
 800363c:	2300      	movne	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	429a      	cmp	r2, r3
 8003646:	d19b      	bne.n	8003580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000030 	.word	0x20000030

08003658 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800366a:	f7fd ff55 	bl	8001518 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	4413      	add	r3, r2
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800367a:	f7fd ff4d 	bl	8001518 <HAL_GetTick>
 800367e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	330c      	adds	r3, #12
 8003686:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003688:	4b3d      	ldr	r3, [pc, #244]	; (8003780 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	00da      	lsls	r2, r3, #3
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	0d1b      	lsrs	r3, r3, #20
 8003698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80036a0:	e060      	b.n	8003764 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036a8:	d107      	bne.n	80036ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d050      	beq.n	8003764 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036c2:	f7fd ff29 	bl	8001518 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d902      	bls.n	80036d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d13d      	bne.n	8003754 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036f0:	d111      	bne.n	8003716 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fa:	d004      	beq.n	8003706 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003704:	d107      	bne.n	8003716 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003714:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371e:	d10f      	bne.n	8003740 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800373e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e010      	b.n	8003776 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	3b01      	subs	r3, #1
 8003762:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4013      	ands	r3, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	d196      	bne.n	80036a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3728      	adds	r7, #40	; 0x28
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000030 	.word	0x20000030

08003784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2200      	movs	r2, #0
 8003798:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff ff5b 	bl	8003658 <SPI_WaitFifoStateUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e027      	b.n	8003808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2200      	movs	r2, #0
 80037c0:	2180      	movs	r1, #128	; 0x80
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7ff fec0 	bl	8003548 <SPI_WaitFlagStateUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d2:	f043 0220 	orr.w	r2, r3, #32
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e014      	b.n	8003808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff ff34 	bl	8003658 <SPI_WaitFifoStateUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e000      	b.n	8003808 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e040      	b.n	80038a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd fbb2 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fc7c 	bl	800414c <UART_SetConfig>
 8003854:	4603      	mov	r3, r0
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e022      	b.n	80038a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fe9c 	bl	80045a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800387a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800388a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 ff23 	bl	80046e8 <UART_CheckIdleState>
 80038a2:	4603      	mov	r3, r0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	f040 8082 	bne.w	80039ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_UART_Transmit+0x26>
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e07a      	b.n	80039cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_UART_Transmit+0x38>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e073      	b.n	80039cc <HAL_UART_Transmit+0x120>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2221      	movs	r2, #33	; 0x21
 80038f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038fa:	f7fd fe0d 	bl	8001518 <HAL_GetTick>
 80038fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	88fa      	ldrh	r2, [r7, #6]
 8003904:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003918:	d108      	bne.n	800392c <HAL_UART_Transmit+0x80>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d104      	bne.n	800392c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	e003      	b.n	8003934 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003930:	2300      	movs	r3, #0
 8003932:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800393c:	e02d      	b.n	800399a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 ff16 	bl	800477a <UART_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e039      	b.n	80039cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	881a      	ldrh	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800396a:	b292      	uxth	r2, r2
 800396c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	3302      	adds	r3, #2
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	e008      	b.n	8003988 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	781a      	ldrb	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	b292      	uxth	r2, r2
 8003980:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3301      	adds	r3, #1
 8003986:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1cb      	bne.n	800393e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2200      	movs	r2, #0
 80039ae:	2140      	movs	r1, #64	; 0x40
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fee2 	bl	800477a <UART_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e005      	b.n	80039cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	e000      	b.n	80039cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80039ca:	2302      	movs	r3, #2
  }
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3720      	adds	r7, #32
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b08b      	sub	sp, #44	; 0x2c
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d156      	bne.n	8003a98 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <HAL_UART_Transmit_IT+0x22>
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e04f      	b.n	8003a9a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Transmit_IT+0x34>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e048      	b.n	8003a9a <HAL_UART_Transmit_IT+0xc6>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	88fa      	ldrh	r2, [r7, #6]
 8003a1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2221      	movs	r2, #33	; 0x21
 8003a38:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a42:	d107      	bne.n	8003a54 <HAL_UART_Transmit_IT+0x80>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d103      	bne.n	8003a54 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <HAL_UART_Transmit_IT+0xd4>)
 8003a50:	669a      	str	r2, [r3, #104]	; 0x68
 8003a52:	e002      	b.n	8003a5a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <HAL_UART_Transmit_IT+0xd8>)
 8003a58:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	623b      	str	r3, [r7, #32]
 8003a82:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	69f9      	ldr	r1, [r7, #28]
 8003a86:	6a3a      	ldr	r2, [r7, #32]
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e6      	bne.n	8003a62 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	372c      	adds	r7, #44	; 0x2c
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	08004c43 	.word	0x08004c43
 8003aac:	08004b8b 	.word	0x08004b8b

08003ab0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	4613      	mov	r3, r2
 8003abc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d142      	bne.n	8003b4c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_UART_Receive_IT+0x22>
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e03b      	b.n	8003b4e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_UART_Receive_IT+0x34>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e034      	b.n	8003b4e <HAL_UART_Receive_IT+0x9e>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <HAL_UART_Receive_IT+0xa8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d01f      	beq.n	8003b3c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d018      	beq.n	8003b3c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	613b      	str	r3, [r7, #16]
   return(result);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	623b      	str	r3, [r7, #32]
 8003b2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	69f9      	ldr	r1, [r7, #28]
 8003b2e:	6a3a      	ldr	r2, [r7, #32]
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e6      	bne.n	8003b0a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fede 	bl	8004904 <UART_Start_Receive_IT>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	e000      	b.n	8003b4e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3728      	adds	r7, #40	; 0x28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40008000 	.word	0x40008000

08003b5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b0ba      	sub	sp, #232	; 0xe8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b86:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d115      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00f      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d009      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 82a6 	beq.w	8004106 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
      }
      return;
 8003bc2:	e2a0      	b.n	8004106 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8117 	beq.w	8003dfc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003bda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003bde:	4b85      	ldr	r3, [pc, #532]	; (8003df4 <HAL_UART_IRQHandler+0x298>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 810a 	beq.w	8003dfc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d011      	beq.n	8003c18 <HAL_UART_IRQHandler+0xbc>
 8003bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00b      	beq.n	8003c18 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2201      	movs	r2, #1
 8003c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0e:	f043 0201 	orr.w	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d011      	beq.n	8003c48 <HAL_UART_IRQHandler+0xec>
 8003c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00b      	beq.n	8003c48 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2202      	movs	r2, #2
 8003c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3e:	f043 0204 	orr.w	r2, r3, #4
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d011      	beq.n	8003c78 <HAL_UART_IRQHandler+0x11c>
 8003c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00b      	beq.n	8003c78 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2204      	movs	r2, #4
 8003c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6e:	f043 0202 	orr.w	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d017      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d105      	bne.n	8003c9c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00b      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003caa:	f043 0208 	orr.w	r2, r3, #8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d012      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x18a>
 8003cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00c      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cdc:	f043 0220 	orr.w	r2, r3, #32
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 820c 	beq.w	800410a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d007      	beq.n	8003d1a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d005      	beq.n	8003d3e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d04f      	beq.n	8003dde <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 feaa 	bl	8004a98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	d141      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3308      	adds	r3, #8
 8003d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1d9      	bne.n	8003d52 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d013      	beq.n	8003dce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	4a13      	ldr	r2, [pc, #76]	; (8003df8 <HAL_UART_IRQHandler+0x29c>)
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fd fd2f 	bl	8001816 <HAL_DMA_Abort_IT>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d017      	beq.n	8003dee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	e00f      	b.n	8003dee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f9a6 	bl	8004120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	e00b      	b.n	8003dee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f9a2 	bl	8004120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	e007      	b.n	8003dee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f99e 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003dec:	e18d      	b.n	800410a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dee:	bf00      	nop
    return;
 8003df0:	e18b      	b.n	800410a <HAL_UART_IRQHandler+0x5ae>
 8003df2:	bf00      	nop
 8003df4:	04000120 	.word	0x04000120
 8003df8:	08004b5f 	.word	0x08004b5f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	f040 8146 	bne.w	8004092 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 813f 	beq.w	8004092 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8138 	beq.w	8004092 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2210      	movs	r2, #16
 8003e28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	f040 80b4 	bne.w	8003fa2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 815f 	beq.w	800410e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	f080 8157 	bcs.w	800410e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f040 8085 	bne.w	8003f86 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003eaa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1da      	bne.n	8003e7c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3308      	adds	r3, #8
 8003ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003eee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e1      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3308      	adds	r3, #8
 8003f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3308      	adds	r3, #8
 8003f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e3      	bne.n	8003f02 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f56:	f023 0310 	bic.w	r3, r3, #16
 8003f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f68:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e4      	bne.n	8003f46 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fd fc0a 	bl	800179a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f8ca 	bl	8004134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fa0:	e0b5      	b.n	800410e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 80a7 	beq.w	8004112 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80a2 	beq.w	8004112 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e4      	bne.n	8003fce <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3308      	adds	r3, #8
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	623b      	str	r3, [r7, #32]
   return(result);
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3308      	adds	r3, #8
 8004024:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004028:	633a      	str	r2, [r7, #48]	; 0x30
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800402e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e3      	bne.n	8004004 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	60fb      	str	r3, [r7, #12]
   return(result);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0310 	bic.w	r3, r3, #16
 8004062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	617b      	str	r3, [r7, #20]
   return(result);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e4      	bne.n	800404e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f852 	bl	8004134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004090:	e03f      	b.n	8004112 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00e      	beq.n	80040bc <HAL_UART_IRQHandler+0x560>
 800409e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 ffae 	bl	8005016 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040ba:	e02d      	b.n	8004118 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00e      	beq.n	80040e6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01c      	beq.n	8004116 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4798      	blx	r3
    }
    return;
 80040e4:	e017      	b.n	8004116 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d012      	beq.n	8004118 <HAL_UART_IRQHandler+0x5bc>
 80040f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fdff 	bl	8004d02 <UART_EndTransmit_IT>
    return;
 8004104:	e008      	b.n	8004118 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004106:	bf00      	nop
 8004108:	e006      	b.n	8004118 <HAL_UART_IRQHandler+0x5bc>
    return;
 800410a:	bf00      	nop
 800410c:	e004      	b.n	8004118 <HAL_UART_IRQHandler+0x5bc>
      return;
 800410e:	bf00      	nop
 8004110:	e002      	b.n	8004118 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004112:	bf00      	nop
 8004114:	e000      	b.n	8004118 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004116:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004118:	37e8      	adds	r7, #232	; 0xe8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop

08004120 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800414c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004150:	b08a      	sub	sp, #40	; 0x28
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	431a      	orrs	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	4313      	orrs	r3, r2
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4bb4      	ldr	r3, [pc, #720]	; (800444c <UART_SetConfig+0x300>)
 800417c:	4013      	ands	r3, r2
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004184:	430b      	orrs	r3, r1
 8004186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4aa9      	ldr	r2, [pc, #676]	; (8004450 <UART_SetConfig+0x304>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b4:	4313      	orrs	r3, r2
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4aa0      	ldr	r2, [pc, #640]	; (8004454 <UART_SetConfig+0x308>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d126      	bne.n	8004224 <UART_SetConfig+0xd8>
 80041d6:	4ba0      	ldr	r3, [pc, #640]	; (8004458 <UART_SetConfig+0x30c>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d81b      	bhi.n	800421c <UART_SetConfig+0xd0>
 80041e4:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <UART_SetConfig+0xa0>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	0800420d 	.word	0x0800420d
 80041f4:	08004205 	.word	0x08004205
 80041f8:	08004215 	.word	0x08004215
 80041fc:	2301      	movs	r3, #1
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004202:	e080      	b.n	8004306 <UART_SetConfig+0x1ba>
 8004204:	2302      	movs	r3, #2
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420a:	e07c      	b.n	8004306 <UART_SetConfig+0x1ba>
 800420c:	2304      	movs	r3, #4
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e078      	b.n	8004306 <UART_SetConfig+0x1ba>
 8004214:	2308      	movs	r3, #8
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421a:	e074      	b.n	8004306 <UART_SetConfig+0x1ba>
 800421c:	2310      	movs	r3, #16
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004222:	e070      	b.n	8004306 <UART_SetConfig+0x1ba>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a8c      	ldr	r2, [pc, #560]	; (800445c <UART_SetConfig+0x310>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d138      	bne.n	80042a0 <UART_SetConfig+0x154>
 800422e:	4b8a      	ldr	r3, [pc, #552]	; (8004458 <UART_SetConfig+0x30c>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f003 030c 	and.w	r3, r3, #12
 8004238:	2b0c      	cmp	r3, #12
 800423a:	d82d      	bhi.n	8004298 <UART_SetConfig+0x14c>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <UART_SetConfig+0xf8>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004279 	.word	0x08004279
 8004248:	08004299 	.word	0x08004299
 800424c:	08004299 	.word	0x08004299
 8004250:	08004299 	.word	0x08004299
 8004254:	08004289 	.word	0x08004289
 8004258:	08004299 	.word	0x08004299
 800425c:	08004299 	.word	0x08004299
 8004260:	08004299 	.word	0x08004299
 8004264:	08004281 	.word	0x08004281
 8004268:	08004299 	.word	0x08004299
 800426c:	08004299 	.word	0x08004299
 8004270:	08004299 	.word	0x08004299
 8004274:	08004291 	.word	0x08004291
 8004278:	2300      	movs	r3, #0
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427e:	e042      	b.n	8004306 <UART_SetConfig+0x1ba>
 8004280:	2302      	movs	r3, #2
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004286:	e03e      	b.n	8004306 <UART_SetConfig+0x1ba>
 8004288:	2304      	movs	r3, #4
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e03a      	b.n	8004306 <UART_SetConfig+0x1ba>
 8004290:	2308      	movs	r3, #8
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e036      	b.n	8004306 <UART_SetConfig+0x1ba>
 8004298:	2310      	movs	r3, #16
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e032      	b.n	8004306 <UART_SetConfig+0x1ba>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a6a      	ldr	r2, [pc, #424]	; (8004450 <UART_SetConfig+0x304>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d12a      	bne.n	8004300 <UART_SetConfig+0x1b4>
 80042aa:	4b6b      	ldr	r3, [pc, #428]	; (8004458 <UART_SetConfig+0x30c>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042b8:	d01a      	beq.n	80042f0 <UART_SetConfig+0x1a4>
 80042ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042be:	d81b      	bhi.n	80042f8 <UART_SetConfig+0x1ac>
 80042c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c4:	d00c      	beq.n	80042e0 <UART_SetConfig+0x194>
 80042c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ca:	d815      	bhi.n	80042f8 <UART_SetConfig+0x1ac>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <UART_SetConfig+0x18c>
 80042d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d4:	d008      	beq.n	80042e8 <UART_SetConfig+0x19c>
 80042d6:	e00f      	b.n	80042f8 <UART_SetConfig+0x1ac>
 80042d8:	2300      	movs	r3, #0
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042de:	e012      	b.n	8004306 <UART_SetConfig+0x1ba>
 80042e0:	2302      	movs	r3, #2
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e6:	e00e      	b.n	8004306 <UART_SetConfig+0x1ba>
 80042e8:	2304      	movs	r3, #4
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ee:	e00a      	b.n	8004306 <UART_SetConfig+0x1ba>
 80042f0:	2308      	movs	r3, #8
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	e006      	b.n	8004306 <UART_SetConfig+0x1ba>
 80042f8:	2310      	movs	r3, #16
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e002      	b.n	8004306 <UART_SetConfig+0x1ba>
 8004300:	2310      	movs	r3, #16
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a51      	ldr	r2, [pc, #324]	; (8004450 <UART_SetConfig+0x304>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d17a      	bne.n	8004406 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004310:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004314:	2b08      	cmp	r3, #8
 8004316:	d824      	bhi.n	8004362 <UART_SetConfig+0x216>
 8004318:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <UART_SetConfig+0x1d4>)
 800431a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431e:	bf00      	nop
 8004320:	08004345 	.word	0x08004345
 8004324:	08004363 	.word	0x08004363
 8004328:	0800434d 	.word	0x0800434d
 800432c:	08004363 	.word	0x08004363
 8004330:	08004353 	.word	0x08004353
 8004334:	08004363 	.word	0x08004363
 8004338:	08004363 	.word	0x08004363
 800433c:	08004363 	.word	0x08004363
 8004340:	0800435b 	.word	0x0800435b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004344:	f7fe fa4a 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 8004348:	61f8      	str	r0, [r7, #28]
        break;
 800434a:	e010      	b.n	800436e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800434c:	4b44      	ldr	r3, [pc, #272]	; (8004460 <UART_SetConfig+0x314>)
 800434e:	61fb      	str	r3, [r7, #28]
        break;
 8004350:	e00d      	b.n	800436e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004352:	f7fe f9ab 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8004356:	61f8      	str	r0, [r7, #28]
        break;
 8004358:	e009      	b.n	800436e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800435a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435e:	61fb      	str	r3, [r7, #28]
        break;
 8004360:	e005      	b.n	800436e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800436c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8107 	beq.w	8004584 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	429a      	cmp	r2, r3
 8004384:	d305      	bcc.n	8004392 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	429a      	cmp	r2, r3
 8004390:	d903      	bls.n	800439a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004398:	e0f4      	b.n	8004584 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	2200      	movs	r2, #0
 800439e:	461c      	mov	r4, r3
 80043a0:	4615      	mov	r5, r2
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	022b      	lsls	r3, r5, #8
 80043ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80043b0:	0222      	lsls	r2, r4, #8
 80043b2:	68f9      	ldr	r1, [r7, #12]
 80043b4:	6849      	ldr	r1, [r1, #4]
 80043b6:	0849      	lsrs	r1, r1, #1
 80043b8:	2000      	movs	r0, #0
 80043ba:	4688      	mov	r8, r1
 80043bc:	4681      	mov	r9, r0
 80043be:	eb12 0a08 	adds.w	sl, r2, r8
 80043c2:	eb43 0b09 	adc.w	fp, r3, r9
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043d4:	4650      	mov	r0, sl
 80043d6:	4659      	mov	r1, fp
 80043d8:	f7fb ff52 	bl	8000280 <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4613      	mov	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ea:	d308      	bcc.n	80043fe <UART_SetConfig+0x2b2>
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f2:	d204      	bcs.n	80043fe <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	60da      	str	r2, [r3, #12]
 80043fc:	e0c2      	b.n	8004584 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004404:	e0be      	b.n	8004584 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800440e:	d16a      	bne.n	80044e6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004410:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004414:	2b08      	cmp	r3, #8
 8004416:	d834      	bhi.n	8004482 <UART_SetConfig+0x336>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <UART_SetConfig+0x2d4>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	08004445 	.word	0x08004445
 8004424:	08004465 	.word	0x08004465
 8004428:	0800446d 	.word	0x0800446d
 800442c:	08004483 	.word	0x08004483
 8004430:	08004473 	.word	0x08004473
 8004434:	08004483 	.word	0x08004483
 8004438:	08004483 	.word	0x08004483
 800443c:	08004483 	.word	0x08004483
 8004440:	0800447b 	.word	0x0800447b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004444:	f7fe f9ca 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 8004448:	61f8      	str	r0, [r7, #28]
        break;
 800444a:	e020      	b.n	800448e <UART_SetConfig+0x342>
 800444c:	efff69f3 	.word	0xefff69f3
 8004450:	40008000 	.word	0x40008000
 8004454:	40013800 	.word	0x40013800
 8004458:	40021000 	.word	0x40021000
 800445c:	40004400 	.word	0x40004400
 8004460:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004464:	f7fe f9d0 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 8004468:	61f8      	str	r0, [r7, #28]
        break;
 800446a:	e010      	b.n	800448e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800446c:	4b4c      	ldr	r3, [pc, #304]	; (80045a0 <UART_SetConfig+0x454>)
 800446e:	61fb      	str	r3, [r7, #28]
        break;
 8004470:	e00d      	b.n	800448e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004472:	f7fe f91b 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8004476:	61f8      	str	r0, [r7, #28]
        break;
 8004478:	e009      	b.n	800448e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800447a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800447e:	61fb      	str	r3, [r7, #28]
        break;
 8004480:	e005      	b.n	800448e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800448c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d077      	beq.n	8004584 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	005a      	lsls	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	441a      	add	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b0f      	cmp	r3, #15
 80044ae:	d916      	bls.n	80044de <UART_SetConfig+0x392>
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b6:	d212      	bcs.n	80044de <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f023 030f 	bic.w	r3, r3, #15
 80044c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	8afb      	ldrh	r3, [r7, #22]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	8afa      	ldrh	r2, [r7, #22]
 80044da:	60da      	str	r2, [r3, #12]
 80044dc:	e052      	b.n	8004584 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044e4:	e04e      	b.n	8004584 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d827      	bhi.n	800453e <UART_SetConfig+0x3f2>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0x3a8>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004519 	.word	0x08004519
 80044f8:	08004521 	.word	0x08004521
 80044fc:	08004529 	.word	0x08004529
 8004500:	0800453f 	.word	0x0800453f
 8004504:	0800452f 	.word	0x0800452f
 8004508:	0800453f 	.word	0x0800453f
 800450c:	0800453f 	.word	0x0800453f
 8004510:	0800453f 	.word	0x0800453f
 8004514:	08004537 	.word	0x08004537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004518:	f7fe f960 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 800451c:	61f8      	str	r0, [r7, #28]
        break;
 800451e:	e014      	b.n	800454a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004520:	f7fe f972 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 8004524:	61f8      	str	r0, [r7, #28]
        break;
 8004526:	e010      	b.n	800454a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004528:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <UART_SetConfig+0x454>)
 800452a:	61fb      	str	r3, [r7, #28]
        break;
 800452c:	e00d      	b.n	800454a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800452e:	f7fe f8bd 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8004532:	61f8      	str	r0, [r7, #28]
        break;
 8004534:	e009      	b.n	800454a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800453a:	61fb      	str	r3, [r7, #28]
        break;
 800453c:	e005      	b.n	800454a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004548:	bf00      	nop
    }

    if (pclk != 0U)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d019      	beq.n	8004584 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	085a      	lsrs	r2, r3, #1
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	441a      	add	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004562:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b0f      	cmp	r3, #15
 8004568:	d909      	bls.n	800457e <UART_SetConfig+0x432>
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d205      	bcs.n	800457e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60da      	str	r2, [r3, #12]
 800457c:	e002      	b.n	8004584 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004590:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004594:	4618      	mov	r0, r3
 8004596:	3728      	adds	r7, #40	; 0x28
 8004598:	46bd      	mov	sp, r7
 800459a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800459e:	bf00      	nop
 80045a0:	00f42400 	.word	0x00f42400

080045a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01a      	beq.n	80046ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a2:	d10a      	bne.n	80046ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	605a      	str	r2, [r3, #4]
  }
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046f8:	f7fc ff0e 	bl	8001518 <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b08      	cmp	r3, #8
 800470a:	d10e      	bne.n	800472a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800470c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f82d 	bl	800477a <UART_WaitOnFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e023      	b.n	8004772 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b04      	cmp	r3, #4
 8004736:	d10e      	bne.n	8004756 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004738:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f817 	bl	800477a <UART_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e00d      	b.n	8004772 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b09c      	sub	sp, #112	; 0x70
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	4613      	mov	r3, r2
 8004788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478a:	e0a5      	b.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	f000 80a1 	beq.w	80048d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004796:	f7fc febf 	bl	8001518 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d302      	bcc.n	80047ac <UART_WaitOnFlagUntilTimeout+0x32>
 80047a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d13e      	bne.n	800482a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047c0:	667b      	str	r3, [r7, #100]	; 0x64
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e6      	bne.n	80047ac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3308      	adds	r3, #8
 80047e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	663b      	str	r3, [r7, #96]	; 0x60
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3308      	adds	r3, #8
 80047fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004800:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800480c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e5      	bne.n	80047de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e067      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d04f      	beq.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004846:	d147      	bne.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004850:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004866:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
 8004872:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e6      	bne.n	8004852 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3308      	adds	r3, #8
 800488a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	613b      	str	r3, [r7, #16]
   return(result);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	66bb      	str	r3, [r7, #104]	; 0x68
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3308      	adds	r3, #8
 80048a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048a4:	623a      	str	r2, [r7, #32]
 80048a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	69f9      	ldr	r1, [r7, #28]
 80048aa:	6a3a      	ldr	r2, [r7, #32]
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e5      	bne.n	8004884 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e010      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4013      	ands	r3, r2
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	bf0c      	ite	eq
 80048e8:	2301      	moveq	r3, #1
 80048ea:	2300      	movne	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	f43f af4a 	beq.w	800478c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3770      	adds	r7, #112	; 0x70
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004904:	b480      	push	{r7}
 8004906:	b097      	sub	sp, #92	; 0x5c
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	4613      	mov	r3, r2
 8004910:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	88fa      	ldrh	r2, [r7, #6]
 8004924:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004936:	d10e      	bne.n	8004956 <UART_Start_Receive_IT+0x52>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d105      	bne.n	800494c <UART_Start_Receive_IT+0x48>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004946:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800494a:	e02d      	b.n	80049a8 <UART_Start_Receive_IT+0xa4>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	22ff      	movs	r2, #255	; 0xff
 8004950:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004954:	e028      	b.n	80049a8 <UART_Start_Receive_IT+0xa4>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10d      	bne.n	800497a <UART_Start_Receive_IT+0x76>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <UART_Start_Receive_IT+0x6c>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	22ff      	movs	r2, #255	; 0xff
 800496a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800496e:	e01b      	b.n	80049a8 <UART_Start_Receive_IT+0xa4>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	227f      	movs	r2, #127	; 0x7f
 8004974:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004978:	e016      	b.n	80049a8 <UART_Start_Receive_IT+0xa4>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004982:	d10d      	bne.n	80049a0 <UART_Start_Receive_IT+0x9c>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d104      	bne.n	8004996 <UART_Start_Receive_IT+0x92>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	227f      	movs	r2, #127	; 0x7f
 8004990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004994:	e008      	b.n	80049a8 <UART_Start_Receive_IT+0xa4>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	223f      	movs	r2, #63	; 0x3f
 800499a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800499e:	e003      	b.n	80049a8 <UART_Start_Receive_IT+0xa4>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2222      	movs	r2, #34	; 0x22
 80049b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3308      	adds	r3, #8
 80049bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	657b      	str	r3, [r7, #84]	; 0x54
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3308      	adds	r3, #8
 80049d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80049d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e5      	bne.n	80049b6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f2:	d107      	bne.n	8004a04 <UART_Start_Receive_IT+0x100>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d103      	bne.n	8004a04 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a24      	ldr	r2, [pc, #144]	; (8004a90 <UART_Start_Receive_IT+0x18c>)
 8004a00:	665a      	str	r2, [r3, #100]	; 0x64
 8004a02:	e002      	b.n	8004a0a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4a23      	ldr	r2, [pc, #140]	; (8004a94 <UART_Start_Receive_IT+0x190>)
 8004a08:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d019      	beq.n	8004a4e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e6      	bne.n	8004a1a <UART_Start_Receive_IT+0x116>
 8004a4c:	e018      	b.n	8004a80 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f043 0320 	orr.w	r3, r3, #32
 8004a62:	653b      	str	r3, [r7, #80]	; 0x50
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6c:	623b      	str	r3, [r7, #32]
 8004a6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	69f9      	ldr	r1, [r7, #28]
 8004a72:	6a3a      	ldr	r2, [r7, #32]
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e6      	bne.n	8004a4e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	375c      	adds	r7, #92	; 0x5c
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	08004eb7 	.word	0x08004eb7
 8004a94:	08004d57 	.word	0x08004d57

08004a98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b095      	sub	sp, #84	; 0x54
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004abe:	643b      	str	r3, [r7, #64]	; 0x40
 8004ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e6      	bne.n	8004aa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3308      	adds	r3, #8
 8004af0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e5      	bne.n	8004ad2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d118      	bne.n	8004b40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f023 0310 	bic.w	r3, r3, #16
 8004b22:	647b      	str	r3, [r7, #68]	; 0x44
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	6979      	ldr	r1, [r7, #20]
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e6      	bne.n	8004b0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004b52:	bf00      	nop
 8004b54:	3754      	adds	r7, #84	; 0x54
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7ff facf 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b08f      	sub	sp, #60	; 0x3c
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b96:	2b21      	cmp	r3, #33	; 0x21
 8004b98:	d14d      	bne.n	8004c36 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d132      	bne.n	8004c0c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e6      	bne.n	8004ba6 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bec:	633b      	str	r3, [r7, #48]	; 0x30
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	6979      	ldr	r1, [r7, #20]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	613b      	str	r3, [r7, #16]
   return(result);
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e6      	bne.n	8004bd8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004c0a:	e014      	b.n	8004c36 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c10:	781a      	ldrb	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	b292      	uxth	r2, r2
 8004c18:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004c36:	bf00      	nop
 8004c38:	373c      	adds	r7, #60	; 0x3c
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b091      	sub	sp, #68	; 0x44
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c4e:	2b21      	cmp	r3, #33	; 0x21
 8004c50:	d151      	bne.n	8004cf6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d132      	bne.n	8004cc4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	e853 3f00 	ldrex	r3, [r3]
 8004c6a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c84:	e841 2300 	strex	r3, r2, [r1]
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e6      	bne.n	8004c5e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cae:	61fb      	str	r3, [r7, #28]
 8004cb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	69b9      	ldr	r1, [r7, #24]
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	617b      	str	r3, [r7, #20]
   return(result);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e6      	bne.n	8004c90 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004cc2:	e018      	b.n	8004cf6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ccc:	881a      	ldrh	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd6:	b292      	uxth	r2, r2
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	1c9a      	adds	r2, r3, #2
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004cf6:	bf00      	nop
 8004cf8:	3744      	adds	r7, #68	; 0x44
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b088      	sub	sp, #32
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	6979      	ldr	r1, [r7, #20]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	613b      	str	r3, [r7, #16]
   return(result);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e6      	bne.n	8004d0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7fb fe49 	bl	80009e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d4e:	bf00      	nop
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b096      	sub	sp, #88	; 0x58
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d6c:	2b22      	cmp	r3, #34	; 0x22
 8004d6e:	f040 8094 	bne.w	8004e9a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d7c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004d80:	b2d9      	uxtb	r1, r3
 8004d82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d179      	bne.n	8004eae <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dce:	653b      	str	r3, [r7, #80]	; 0x50
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e6      	bne.n	8004dba <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3308      	adds	r3, #8
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	623b      	str	r3, [r7, #32]
   return(result);
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	f023 0301 	bic.w	r3, r3, #1
 8004e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e0c:	633a      	str	r2, [r7, #48]	; 0x30
 8004e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e5      	bne.n	8004dec <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d12e      	bne.n	8004e92 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0310 	bic.w	r3, r3, #16
 8004e4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	69b9      	ldr	r1, [r7, #24]
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	617b      	str	r3, [r7, #20]
   return(result);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e6      	bne.n	8004e3a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b10      	cmp	r3, #16
 8004e78:	d103      	bne.n	8004e82 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2210      	movs	r2, #16
 8004e80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff f952 	bl	8004134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e90:	e00d      	b.n	8004eae <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fb fdb4 	bl	8000a00 <HAL_UART_RxCpltCallback>
}
 8004e98:	e009      	b.n	8004eae <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	8b1b      	ldrh	r3, [r3, #24]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0208 	orr.w	r2, r2, #8
 8004eaa:	b292      	uxth	r2, r2
 8004eac:	831a      	strh	r2, [r3, #24]
}
 8004eae:	bf00      	nop
 8004eb0:	3758      	adds	r7, #88	; 0x58
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b096      	sub	sp, #88	; 0x58
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ec4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ecc:	2b22      	cmp	r3, #34	; 0x22
 8004ece:	f040 8094 	bne.w	8004ffa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ed8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ee2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004ee6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004eea:	4013      	ands	r3, r2
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	1c9a      	adds	r2, r3, #2
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d179      	bne.n	800500e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f38:	643b      	str	r3, [r7, #64]	; 0x40
 8004f3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e6      	bne.n	8004f1a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3308      	adds	r3, #8
 8004f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e5      	bne.n	8004f4c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d12e      	bne.n	8004ff2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f023 0310 	bic.w	r3, r3, #16
 8004fae:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	6979      	ldr	r1, [r7, #20]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e6      	bne.n	8004f9a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b10      	cmp	r3, #16
 8004fd8:	d103      	bne.n	8004fe2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2210      	movs	r2, #16
 8004fe0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fe8:	4619      	mov	r1, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff f8a2 	bl	8004134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ff0:	e00d      	b.n	800500e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fb fd04 	bl	8000a00 <HAL_UART_RxCpltCallback>
}
 8004ff8:	e009      	b.n	800500e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	8b1b      	ldrh	r3, [r3, #24]
 8005000:	b29a      	uxth	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0208 	orr.w	r2, r2, #8
 800500a:	b292      	uxth	r2, r2
 800500c:	831a      	strh	r2, [r3, #24]
}
 800500e:	bf00      	nop
 8005010:	3758      	adds	r7, #88	; 0x58
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <__errno>:
 800502c:	4b01      	ldr	r3, [pc, #4]	; (8005034 <__errno+0x8>)
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	2000003c 	.word	0x2000003c

08005038 <__libc_init_array>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4d0d      	ldr	r5, [pc, #52]	; (8005070 <__libc_init_array+0x38>)
 800503c:	4c0d      	ldr	r4, [pc, #52]	; (8005074 <__libc_init_array+0x3c>)
 800503e:	1b64      	subs	r4, r4, r5
 8005040:	10a4      	asrs	r4, r4, #2
 8005042:	2600      	movs	r6, #0
 8005044:	42a6      	cmp	r6, r4
 8005046:	d109      	bne.n	800505c <__libc_init_array+0x24>
 8005048:	4d0b      	ldr	r5, [pc, #44]	; (8005078 <__libc_init_array+0x40>)
 800504a:	4c0c      	ldr	r4, [pc, #48]	; (800507c <__libc_init_array+0x44>)
 800504c:	f000 fc8e 	bl	800596c <_init>
 8005050:	1b64      	subs	r4, r4, r5
 8005052:	10a4      	asrs	r4, r4, #2
 8005054:	2600      	movs	r6, #0
 8005056:	42a6      	cmp	r6, r4
 8005058:	d105      	bne.n	8005066 <__libc_init_array+0x2e>
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005060:	4798      	blx	r3
 8005062:	3601      	adds	r6, #1
 8005064:	e7ee      	b.n	8005044 <__libc_init_array+0xc>
 8005066:	f855 3b04 	ldr.w	r3, [r5], #4
 800506a:	4798      	blx	r3
 800506c:	3601      	adds	r6, #1
 800506e:	e7f2      	b.n	8005056 <__libc_init_array+0x1e>
 8005070:	08006800 	.word	0x08006800
 8005074:	08006800 	.word	0x08006800
 8005078:	08006800 	.word	0x08006800
 800507c:	08006804 	.word	0x08006804

08005080 <memcpy>:
 8005080:	440a      	add	r2, r1
 8005082:	4291      	cmp	r1, r2
 8005084:	f100 33ff 	add.w	r3, r0, #4294967295
 8005088:	d100      	bne.n	800508c <memcpy+0xc>
 800508a:	4770      	bx	lr
 800508c:	b510      	push	{r4, lr}
 800508e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005096:	4291      	cmp	r1, r2
 8005098:	d1f9      	bne.n	800508e <memcpy+0xe>
 800509a:	bd10      	pop	{r4, pc}

0800509c <memset>:
 800509c:	4402      	add	r2, r0
 800509e:	4603      	mov	r3, r0
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d100      	bne.n	80050a6 <memset+0xa>
 80050a4:	4770      	bx	lr
 80050a6:	f803 1b01 	strb.w	r1, [r3], #1
 80050aa:	e7f9      	b.n	80050a0 <memset+0x4>

080050ac <_free_r>:
 80050ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ae:	2900      	cmp	r1, #0
 80050b0:	d044      	beq.n	800513c <_free_r+0x90>
 80050b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050b6:	9001      	str	r0, [sp, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f1a1 0404 	sub.w	r4, r1, #4
 80050be:	bfb8      	it	lt
 80050c0:	18e4      	addlt	r4, r4, r3
 80050c2:	f000 f903 	bl	80052cc <__malloc_lock>
 80050c6:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <_free_r+0x94>)
 80050c8:	9801      	ldr	r0, [sp, #4]
 80050ca:	6813      	ldr	r3, [r2, #0]
 80050cc:	b933      	cbnz	r3, 80050dc <_free_r+0x30>
 80050ce:	6063      	str	r3, [r4, #4]
 80050d0:	6014      	str	r4, [r2, #0]
 80050d2:	b003      	add	sp, #12
 80050d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050d8:	f000 b8fe 	b.w	80052d8 <__malloc_unlock>
 80050dc:	42a3      	cmp	r3, r4
 80050de:	d908      	bls.n	80050f2 <_free_r+0x46>
 80050e0:	6825      	ldr	r5, [r4, #0]
 80050e2:	1961      	adds	r1, r4, r5
 80050e4:	428b      	cmp	r3, r1
 80050e6:	bf01      	itttt	eq
 80050e8:	6819      	ldreq	r1, [r3, #0]
 80050ea:	685b      	ldreq	r3, [r3, #4]
 80050ec:	1949      	addeq	r1, r1, r5
 80050ee:	6021      	streq	r1, [r4, #0]
 80050f0:	e7ed      	b.n	80050ce <_free_r+0x22>
 80050f2:	461a      	mov	r2, r3
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	b10b      	cbz	r3, 80050fc <_free_r+0x50>
 80050f8:	42a3      	cmp	r3, r4
 80050fa:	d9fa      	bls.n	80050f2 <_free_r+0x46>
 80050fc:	6811      	ldr	r1, [r2, #0]
 80050fe:	1855      	adds	r5, r2, r1
 8005100:	42a5      	cmp	r5, r4
 8005102:	d10b      	bne.n	800511c <_free_r+0x70>
 8005104:	6824      	ldr	r4, [r4, #0]
 8005106:	4421      	add	r1, r4
 8005108:	1854      	adds	r4, r2, r1
 800510a:	42a3      	cmp	r3, r4
 800510c:	6011      	str	r1, [r2, #0]
 800510e:	d1e0      	bne.n	80050d2 <_free_r+0x26>
 8005110:	681c      	ldr	r4, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	6053      	str	r3, [r2, #4]
 8005116:	4421      	add	r1, r4
 8005118:	6011      	str	r1, [r2, #0]
 800511a:	e7da      	b.n	80050d2 <_free_r+0x26>
 800511c:	d902      	bls.n	8005124 <_free_r+0x78>
 800511e:	230c      	movs	r3, #12
 8005120:	6003      	str	r3, [r0, #0]
 8005122:	e7d6      	b.n	80050d2 <_free_r+0x26>
 8005124:	6825      	ldr	r5, [r4, #0]
 8005126:	1961      	adds	r1, r4, r5
 8005128:	428b      	cmp	r3, r1
 800512a:	bf04      	itt	eq
 800512c:	6819      	ldreq	r1, [r3, #0]
 800512e:	685b      	ldreq	r3, [r3, #4]
 8005130:	6063      	str	r3, [r4, #4]
 8005132:	bf04      	itt	eq
 8005134:	1949      	addeq	r1, r1, r5
 8005136:	6021      	streq	r1, [r4, #0]
 8005138:	6054      	str	r4, [r2, #4]
 800513a:	e7ca      	b.n	80050d2 <_free_r+0x26>
 800513c:	b003      	add	sp, #12
 800513e:	bd30      	pop	{r4, r5, pc}
 8005140:	20000298 	.word	0x20000298

08005144 <sbrk_aligned>:
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	4e0e      	ldr	r6, [pc, #56]	; (8005180 <sbrk_aligned+0x3c>)
 8005148:	460c      	mov	r4, r1
 800514a:	6831      	ldr	r1, [r6, #0]
 800514c:	4605      	mov	r5, r0
 800514e:	b911      	cbnz	r1, 8005156 <sbrk_aligned+0x12>
 8005150:	f000 f88c 	bl	800526c <_sbrk_r>
 8005154:	6030      	str	r0, [r6, #0]
 8005156:	4621      	mov	r1, r4
 8005158:	4628      	mov	r0, r5
 800515a:	f000 f887 	bl	800526c <_sbrk_r>
 800515e:	1c43      	adds	r3, r0, #1
 8005160:	d00a      	beq.n	8005178 <sbrk_aligned+0x34>
 8005162:	1cc4      	adds	r4, r0, #3
 8005164:	f024 0403 	bic.w	r4, r4, #3
 8005168:	42a0      	cmp	r0, r4
 800516a:	d007      	beq.n	800517c <sbrk_aligned+0x38>
 800516c:	1a21      	subs	r1, r4, r0
 800516e:	4628      	mov	r0, r5
 8005170:	f000 f87c 	bl	800526c <_sbrk_r>
 8005174:	3001      	adds	r0, #1
 8005176:	d101      	bne.n	800517c <sbrk_aligned+0x38>
 8005178:	f04f 34ff 	mov.w	r4, #4294967295
 800517c:	4620      	mov	r0, r4
 800517e:	bd70      	pop	{r4, r5, r6, pc}
 8005180:	2000029c 	.word	0x2000029c

08005184 <_malloc_r>:
 8005184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005188:	1ccd      	adds	r5, r1, #3
 800518a:	f025 0503 	bic.w	r5, r5, #3
 800518e:	3508      	adds	r5, #8
 8005190:	2d0c      	cmp	r5, #12
 8005192:	bf38      	it	cc
 8005194:	250c      	movcc	r5, #12
 8005196:	2d00      	cmp	r5, #0
 8005198:	4607      	mov	r7, r0
 800519a:	db01      	blt.n	80051a0 <_malloc_r+0x1c>
 800519c:	42a9      	cmp	r1, r5
 800519e:	d905      	bls.n	80051ac <_malloc_r+0x28>
 80051a0:	230c      	movs	r3, #12
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	2600      	movs	r6, #0
 80051a6:	4630      	mov	r0, r6
 80051a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ac:	4e2e      	ldr	r6, [pc, #184]	; (8005268 <_malloc_r+0xe4>)
 80051ae:	f000 f88d 	bl	80052cc <__malloc_lock>
 80051b2:	6833      	ldr	r3, [r6, #0]
 80051b4:	461c      	mov	r4, r3
 80051b6:	bb34      	cbnz	r4, 8005206 <_malloc_r+0x82>
 80051b8:	4629      	mov	r1, r5
 80051ba:	4638      	mov	r0, r7
 80051bc:	f7ff ffc2 	bl	8005144 <sbrk_aligned>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	4604      	mov	r4, r0
 80051c4:	d14d      	bne.n	8005262 <_malloc_r+0xde>
 80051c6:	6834      	ldr	r4, [r6, #0]
 80051c8:	4626      	mov	r6, r4
 80051ca:	2e00      	cmp	r6, #0
 80051cc:	d140      	bne.n	8005250 <_malloc_r+0xcc>
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	4631      	mov	r1, r6
 80051d2:	4638      	mov	r0, r7
 80051d4:	eb04 0803 	add.w	r8, r4, r3
 80051d8:	f000 f848 	bl	800526c <_sbrk_r>
 80051dc:	4580      	cmp	r8, r0
 80051de:	d13a      	bne.n	8005256 <_malloc_r+0xd2>
 80051e0:	6821      	ldr	r1, [r4, #0]
 80051e2:	3503      	adds	r5, #3
 80051e4:	1a6d      	subs	r5, r5, r1
 80051e6:	f025 0503 	bic.w	r5, r5, #3
 80051ea:	3508      	adds	r5, #8
 80051ec:	2d0c      	cmp	r5, #12
 80051ee:	bf38      	it	cc
 80051f0:	250c      	movcc	r5, #12
 80051f2:	4629      	mov	r1, r5
 80051f4:	4638      	mov	r0, r7
 80051f6:	f7ff ffa5 	bl	8005144 <sbrk_aligned>
 80051fa:	3001      	adds	r0, #1
 80051fc:	d02b      	beq.n	8005256 <_malloc_r+0xd2>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	442b      	add	r3, r5
 8005202:	6023      	str	r3, [r4, #0]
 8005204:	e00e      	b.n	8005224 <_malloc_r+0xa0>
 8005206:	6822      	ldr	r2, [r4, #0]
 8005208:	1b52      	subs	r2, r2, r5
 800520a:	d41e      	bmi.n	800524a <_malloc_r+0xc6>
 800520c:	2a0b      	cmp	r2, #11
 800520e:	d916      	bls.n	800523e <_malloc_r+0xba>
 8005210:	1961      	adds	r1, r4, r5
 8005212:	42a3      	cmp	r3, r4
 8005214:	6025      	str	r5, [r4, #0]
 8005216:	bf18      	it	ne
 8005218:	6059      	strne	r1, [r3, #4]
 800521a:	6863      	ldr	r3, [r4, #4]
 800521c:	bf08      	it	eq
 800521e:	6031      	streq	r1, [r6, #0]
 8005220:	5162      	str	r2, [r4, r5]
 8005222:	604b      	str	r3, [r1, #4]
 8005224:	4638      	mov	r0, r7
 8005226:	f104 060b 	add.w	r6, r4, #11
 800522a:	f000 f855 	bl	80052d8 <__malloc_unlock>
 800522e:	f026 0607 	bic.w	r6, r6, #7
 8005232:	1d23      	adds	r3, r4, #4
 8005234:	1af2      	subs	r2, r6, r3
 8005236:	d0b6      	beq.n	80051a6 <_malloc_r+0x22>
 8005238:	1b9b      	subs	r3, r3, r6
 800523a:	50a3      	str	r3, [r4, r2]
 800523c:	e7b3      	b.n	80051a6 <_malloc_r+0x22>
 800523e:	6862      	ldr	r2, [r4, #4]
 8005240:	42a3      	cmp	r3, r4
 8005242:	bf0c      	ite	eq
 8005244:	6032      	streq	r2, [r6, #0]
 8005246:	605a      	strne	r2, [r3, #4]
 8005248:	e7ec      	b.n	8005224 <_malloc_r+0xa0>
 800524a:	4623      	mov	r3, r4
 800524c:	6864      	ldr	r4, [r4, #4]
 800524e:	e7b2      	b.n	80051b6 <_malloc_r+0x32>
 8005250:	4634      	mov	r4, r6
 8005252:	6876      	ldr	r6, [r6, #4]
 8005254:	e7b9      	b.n	80051ca <_malloc_r+0x46>
 8005256:	230c      	movs	r3, #12
 8005258:	603b      	str	r3, [r7, #0]
 800525a:	4638      	mov	r0, r7
 800525c:	f000 f83c 	bl	80052d8 <__malloc_unlock>
 8005260:	e7a1      	b.n	80051a6 <_malloc_r+0x22>
 8005262:	6025      	str	r5, [r4, #0]
 8005264:	e7de      	b.n	8005224 <_malloc_r+0xa0>
 8005266:	bf00      	nop
 8005268:	20000298 	.word	0x20000298

0800526c <_sbrk_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4d06      	ldr	r5, [pc, #24]	; (8005288 <_sbrk_r+0x1c>)
 8005270:	2300      	movs	r3, #0
 8005272:	4604      	mov	r4, r0
 8005274:	4608      	mov	r0, r1
 8005276:	602b      	str	r3, [r5, #0]
 8005278:	f7fc f874 	bl	8001364 <_sbrk>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d102      	bne.n	8005286 <_sbrk_r+0x1a>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	b103      	cbz	r3, 8005286 <_sbrk_r+0x1a>
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	200002a0 	.word	0x200002a0

0800528c <siprintf>:
 800528c:	b40e      	push	{r1, r2, r3}
 800528e:	b500      	push	{lr}
 8005290:	b09c      	sub	sp, #112	; 0x70
 8005292:	ab1d      	add	r3, sp, #116	; 0x74
 8005294:	9002      	str	r0, [sp, #8]
 8005296:	9006      	str	r0, [sp, #24]
 8005298:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800529c:	4809      	ldr	r0, [pc, #36]	; (80052c4 <siprintf+0x38>)
 800529e:	9107      	str	r1, [sp, #28]
 80052a0:	9104      	str	r1, [sp, #16]
 80052a2:	4909      	ldr	r1, [pc, #36]	; (80052c8 <siprintf+0x3c>)
 80052a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80052a8:	9105      	str	r1, [sp, #20]
 80052aa:	6800      	ldr	r0, [r0, #0]
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	a902      	add	r1, sp, #8
 80052b0:	f000 f874 	bl	800539c <_svfiprintf_r>
 80052b4:	9b02      	ldr	r3, [sp, #8]
 80052b6:	2200      	movs	r2, #0
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	b01c      	add	sp, #112	; 0x70
 80052bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80052c0:	b003      	add	sp, #12
 80052c2:	4770      	bx	lr
 80052c4:	2000003c 	.word	0x2000003c
 80052c8:	ffff0208 	.word	0xffff0208

080052cc <__malloc_lock>:
 80052cc:	4801      	ldr	r0, [pc, #4]	; (80052d4 <__malloc_lock+0x8>)
 80052ce:	f000 baf9 	b.w	80058c4 <__retarget_lock_acquire_recursive>
 80052d2:	bf00      	nop
 80052d4:	200002a4 	.word	0x200002a4

080052d8 <__malloc_unlock>:
 80052d8:	4801      	ldr	r0, [pc, #4]	; (80052e0 <__malloc_unlock+0x8>)
 80052da:	f000 baf4 	b.w	80058c6 <__retarget_lock_release_recursive>
 80052de:	bf00      	nop
 80052e0:	200002a4 	.word	0x200002a4

080052e4 <__ssputs_r>:
 80052e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e8:	688e      	ldr	r6, [r1, #8]
 80052ea:	429e      	cmp	r6, r3
 80052ec:	4682      	mov	sl, r0
 80052ee:	460c      	mov	r4, r1
 80052f0:	4690      	mov	r8, r2
 80052f2:	461f      	mov	r7, r3
 80052f4:	d838      	bhi.n	8005368 <__ssputs_r+0x84>
 80052f6:	898a      	ldrh	r2, [r1, #12]
 80052f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052fc:	d032      	beq.n	8005364 <__ssputs_r+0x80>
 80052fe:	6825      	ldr	r5, [r4, #0]
 8005300:	6909      	ldr	r1, [r1, #16]
 8005302:	eba5 0901 	sub.w	r9, r5, r1
 8005306:	6965      	ldr	r5, [r4, #20]
 8005308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800530c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005310:	3301      	adds	r3, #1
 8005312:	444b      	add	r3, r9
 8005314:	106d      	asrs	r5, r5, #1
 8005316:	429d      	cmp	r5, r3
 8005318:	bf38      	it	cc
 800531a:	461d      	movcc	r5, r3
 800531c:	0553      	lsls	r3, r2, #21
 800531e:	d531      	bpl.n	8005384 <__ssputs_r+0xa0>
 8005320:	4629      	mov	r1, r5
 8005322:	f7ff ff2f 	bl	8005184 <_malloc_r>
 8005326:	4606      	mov	r6, r0
 8005328:	b950      	cbnz	r0, 8005340 <__ssputs_r+0x5c>
 800532a:	230c      	movs	r3, #12
 800532c:	f8ca 3000 	str.w	r3, [sl]
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005336:	81a3      	strh	r3, [r4, #12]
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005340:	6921      	ldr	r1, [r4, #16]
 8005342:	464a      	mov	r2, r9
 8005344:	f7ff fe9c 	bl	8005080 <memcpy>
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800534e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005352:	81a3      	strh	r3, [r4, #12]
 8005354:	6126      	str	r6, [r4, #16]
 8005356:	6165      	str	r5, [r4, #20]
 8005358:	444e      	add	r6, r9
 800535a:	eba5 0509 	sub.w	r5, r5, r9
 800535e:	6026      	str	r6, [r4, #0]
 8005360:	60a5      	str	r5, [r4, #8]
 8005362:	463e      	mov	r6, r7
 8005364:	42be      	cmp	r6, r7
 8005366:	d900      	bls.n	800536a <__ssputs_r+0x86>
 8005368:	463e      	mov	r6, r7
 800536a:	6820      	ldr	r0, [r4, #0]
 800536c:	4632      	mov	r2, r6
 800536e:	4641      	mov	r1, r8
 8005370:	f000 faaa 	bl	80058c8 <memmove>
 8005374:	68a3      	ldr	r3, [r4, #8]
 8005376:	1b9b      	subs	r3, r3, r6
 8005378:	60a3      	str	r3, [r4, #8]
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	4433      	add	r3, r6
 800537e:	6023      	str	r3, [r4, #0]
 8005380:	2000      	movs	r0, #0
 8005382:	e7db      	b.n	800533c <__ssputs_r+0x58>
 8005384:	462a      	mov	r2, r5
 8005386:	f000 fab9 	bl	80058fc <_realloc_r>
 800538a:	4606      	mov	r6, r0
 800538c:	2800      	cmp	r0, #0
 800538e:	d1e1      	bne.n	8005354 <__ssputs_r+0x70>
 8005390:	6921      	ldr	r1, [r4, #16]
 8005392:	4650      	mov	r0, sl
 8005394:	f7ff fe8a 	bl	80050ac <_free_r>
 8005398:	e7c7      	b.n	800532a <__ssputs_r+0x46>
	...

0800539c <_svfiprintf_r>:
 800539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a0:	4698      	mov	r8, r3
 80053a2:	898b      	ldrh	r3, [r1, #12]
 80053a4:	061b      	lsls	r3, r3, #24
 80053a6:	b09d      	sub	sp, #116	; 0x74
 80053a8:	4607      	mov	r7, r0
 80053aa:	460d      	mov	r5, r1
 80053ac:	4614      	mov	r4, r2
 80053ae:	d50e      	bpl.n	80053ce <_svfiprintf_r+0x32>
 80053b0:	690b      	ldr	r3, [r1, #16]
 80053b2:	b963      	cbnz	r3, 80053ce <_svfiprintf_r+0x32>
 80053b4:	2140      	movs	r1, #64	; 0x40
 80053b6:	f7ff fee5 	bl	8005184 <_malloc_r>
 80053ba:	6028      	str	r0, [r5, #0]
 80053bc:	6128      	str	r0, [r5, #16]
 80053be:	b920      	cbnz	r0, 80053ca <_svfiprintf_r+0x2e>
 80053c0:	230c      	movs	r3, #12
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	f04f 30ff 	mov.w	r0, #4294967295
 80053c8:	e0d1      	b.n	800556e <_svfiprintf_r+0x1d2>
 80053ca:	2340      	movs	r3, #64	; 0x40
 80053cc:	616b      	str	r3, [r5, #20]
 80053ce:	2300      	movs	r3, #0
 80053d0:	9309      	str	r3, [sp, #36]	; 0x24
 80053d2:	2320      	movs	r3, #32
 80053d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80053dc:	2330      	movs	r3, #48	; 0x30
 80053de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005588 <_svfiprintf_r+0x1ec>
 80053e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053e6:	f04f 0901 	mov.w	r9, #1
 80053ea:	4623      	mov	r3, r4
 80053ec:	469a      	mov	sl, r3
 80053ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053f2:	b10a      	cbz	r2, 80053f8 <_svfiprintf_r+0x5c>
 80053f4:	2a25      	cmp	r2, #37	; 0x25
 80053f6:	d1f9      	bne.n	80053ec <_svfiprintf_r+0x50>
 80053f8:	ebba 0b04 	subs.w	fp, sl, r4
 80053fc:	d00b      	beq.n	8005416 <_svfiprintf_r+0x7a>
 80053fe:	465b      	mov	r3, fp
 8005400:	4622      	mov	r2, r4
 8005402:	4629      	mov	r1, r5
 8005404:	4638      	mov	r0, r7
 8005406:	f7ff ff6d 	bl	80052e4 <__ssputs_r>
 800540a:	3001      	adds	r0, #1
 800540c:	f000 80aa 	beq.w	8005564 <_svfiprintf_r+0x1c8>
 8005410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005412:	445a      	add	r2, fp
 8005414:	9209      	str	r2, [sp, #36]	; 0x24
 8005416:	f89a 3000 	ldrb.w	r3, [sl]
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 80a2 	beq.w	8005564 <_svfiprintf_r+0x1c8>
 8005420:	2300      	movs	r3, #0
 8005422:	f04f 32ff 	mov.w	r2, #4294967295
 8005426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800542a:	f10a 0a01 	add.w	sl, sl, #1
 800542e:	9304      	str	r3, [sp, #16]
 8005430:	9307      	str	r3, [sp, #28]
 8005432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005436:	931a      	str	r3, [sp, #104]	; 0x68
 8005438:	4654      	mov	r4, sl
 800543a:	2205      	movs	r2, #5
 800543c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005440:	4851      	ldr	r0, [pc, #324]	; (8005588 <_svfiprintf_r+0x1ec>)
 8005442:	f7fa fecd 	bl	80001e0 <memchr>
 8005446:	9a04      	ldr	r2, [sp, #16]
 8005448:	b9d8      	cbnz	r0, 8005482 <_svfiprintf_r+0xe6>
 800544a:	06d0      	lsls	r0, r2, #27
 800544c:	bf44      	itt	mi
 800544e:	2320      	movmi	r3, #32
 8005450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005454:	0711      	lsls	r1, r2, #28
 8005456:	bf44      	itt	mi
 8005458:	232b      	movmi	r3, #43	; 0x2b
 800545a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800545e:	f89a 3000 	ldrb.w	r3, [sl]
 8005462:	2b2a      	cmp	r3, #42	; 0x2a
 8005464:	d015      	beq.n	8005492 <_svfiprintf_r+0xf6>
 8005466:	9a07      	ldr	r2, [sp, #28]
 8005468:	4654      	mov	r4, sl
 800546a:	2000      	movs	r0, #0
 800546c:	f04f 0c0a 	mov.w	ip, #10
 8005470:	4621      	mov	r1, r4
 8005472:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005476:	3b30      	subs	r3, #48	; 0x30
 8005478:	2b09      	cmp	r3, #9
 800547a:	d94e      	bls.n	800551a <_svfiprintf_r+0x17e>
 800547c:	b1b0      	cbz	r0, 80054ac <_svfiprintf_r+0x110>
 800547e:	9207      	str	r2, [sp, #28]
 8005480:	e014      	b.n	80054ac <_svfiprintf_r+0x110>
 8005482:	eba0 0308 	sub.w	r3, r0, r8
 8005486:	fa09 f303 	lsl.w	r3, r9, r3
 800548a:	4313      	orrs	r3, r2
 800548c:	9304      	str	r3, [sp, #16]
 800548e:	46a2      	mov	sl, r4
 8005490:	e7d2      	b.n	8005438 <_svfiprintf_r+0x9c>
 8005492:	9b03      	ldr	r3, [sp, #12]
 8005494:	1d19      	adds	r1, r3, #4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	9103      	str	r1, [sp, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	bfbb      	ittet	lt
 800549e:	425b      	neglt	r3, r3
 80054a0:	f042 0202 	orrlt.w	r2, r2, #2
 80054a4:	9307      	strge	r3, [sp, #28]
 80054a6:	9307      	strlt	r3, [sp, #28]
 80054a8:	bfb8      	it	lt
 80054aa:	9204      	strlt	r2, [sp, #16]
 80054ac:	7823      	ldrb	r3, [r4, #0]
 80054ae:	2b2e      	cmp	r3, #46	; 0x2e
 80054b0:	d10c      	bne.n	80054cc <_svfiprintf_r+0x130>
 80054b2:	7863      	ldrb	r3, [r4, #1]
 80054b4:	2b2a      	cmp	r3, #42	; 0x2a
 80054b6:	d135      	bne.n	8005524 <_svfiprintf_r+0x188>
 80054b8:	9b03      	ldr	r3, [sp, #12]
 80054ba:	1d1a      	adds	r2, r3, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	9203      	str	r2, [sp, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bfb8      	it	lt
 80054c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80054c8:	3402      	adds	r4, #2
 80054ca:	9305      	str	r3, [sp, #20]
 80054cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005598 <_svfiprintf_r+0x1fc>
 80054d0:	7821      	ldrb	r1, [r4, #0]
 80054d2:	2203      	movs	r2, #3
 80054d4:	4650      	mov	r0, sl
 80054d6:	f7fa fe83 	bl	80001e0 <memchr>
 80054da:	b140      	cbz	r0, 80054ee <_svfiprintf_r+0x152>
 80054dc:	2340      	movs	r3, #64	; 0x40
 80054de:	eba0 000a 	sub.w	r0, r0, sl
 80054e2:	fa03 f000 	lsl.w	r0, r3, r0
 80054e6:	9b04      	ldr	r3, [sp, #16]
 80054e8:	4303      	orrs	r3, r0
 80054ea:	3401      	adds	r4, #1
 80054ec:	9304      	str	r3, [sp, #16]
 80054ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f2:	4826      	ldr	r0, [pc, #152]	; (800558c <_svfiprintf_r+0x1f0>)
 80054f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054f8:	2206      	movs	r2, #6
 80054fa:	f7fa fe71 	bl	80001e0 <memchr>
 80054fe:	2800      	cmp	r0, #0
 8005500:	d038      	beq.n	8005574 <_svfiprintf_r+0x1d8>
 8005502:	4b23      	ldr	r3, [pc, #140]	; (8005590 <_svfiprintf_r+0x1f4>)
 8005504:	bb1b      	cbnz	r3, 800554e <_svfiprintf_r+0x1b2>
 8005506:	9b03      	ldr	r3, [sp, #12]
 8005508:	3307      	adds	r3, #7
 800550a:	f023 0307 	bic.w	r3, r3, #7
 800550e:	3308      	adds	r3, #8
 8005510:	9303      	str	r3, [sp, #12]
 8005512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005514:	4433      	add	r3, r6
 8005516:	9309      	str	r3, [sp, #36]	; 0x24
 8005518:	e767      	b.n	80053ea <_svfiprintf_r+0x4e>
 800551a:	fb0c 3202 	mla	r2, ip, r2, r3
 800551e:	460c      	mov	r4, r1
 8005520:	2001      	movs	r0, #1
 8005522:	e7a5      	b.n	8005470 <_svfiprintf_r+0xd4>
 8005524:	2300      	movs	r3, #0
 8005526:	3401      	adds	r4, #1
 8005528:	9305      	str	r3, [sp, #20]
 800552a:	4619      	mov	r1, r3
 800552c:	f04f 0c0a 	mov.w	ip, #10
 8005530:	4620      	mov	r0, r4
 8005532:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005536:	3a30      	subs	r2, #48	; 0x30
 8005538:	2a09      	cmp	r2, #9
 800553a:	d903      	bls.n	8005544 <_svfiprintf_r+0x1a8>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0c5      	beq.n	80054cc <_svfiprintf_r+0x130>
 8005540:	9105      	str	r1, [sp, #20]
 8005542:	e7c3      	b.n	80054cc <_svfiprintf_r+0x130>
 8005544:	fb0c 2101 	mla	r1, ip, r1, r2
 8005548:	4604      	mov	r4, r0
 800554a:	2301      	movs	r3, #1
 800554c:	e7f0      	b.n	8005530 <_svfiprintf_r+0x194>
 800554e:	ab03      	add	r3, sp, #12
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	462a      	mov	r2, r5
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <_svfiprintf_r+0x1f8>)
 8005556:	a904      	add	r1, sp, #16
 8005558:	4638      	mov	r0, r7
 800555a:	f3af 8000 	nop.w
 800555e:	1c42      	adds	r2, r0, #1
 8005560:	4606      	mov	r6, r0
 8005562:	d1d6      	bne.n	8005512 <_svfiprintf_r+0x176>
 8005564:	89ab      	ldrh	r3, [r5, #12]
 8005566:	065b      	lsls	r3, r3, #25
 8005568:	f53f af2c 	bmi.w	80053c4 <_svfiprintf_r+0x28>
 800556c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800556e:	b01d      	add	sp, #116	; 0x74
 8005570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005574:	ab03      	add	r3, sp, #12
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	462a      	mov	r2, r5
 800557a:	4b06      	ldr	r3, [pc, #24]	; (8005594 <_svfiprintf_r+0x1f8>)
 800557c:	a904      	add	r1, sp, #16
 800557e:	4638      	mov	r0, r7
 8005580:	f000 f87a 	bl	8005678 <_printf_i>
 8005584:	e7eb      	b.n	800555e <_svfiprintf_r+0x1c2>
 8005586:	bf00      	nop
 8005588:	080067c4 	.word	0x080067c4
 800558c:	080067ce 	.word	0x080067ce
 8005590:	00000000 	.word	0x00000000
 8005594:	080052e5 	.word	0x080052e5
 8005598:	080067ca 	.word	0x080067ca

0800559c <_printf_common>:
 800559c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a0:	4616      	mov	r6, r2
 80055a2:	4699      	mov	r9, r3
 80055a4:	688a      	ldr	r2, [r1, #8]
 80055a6:	690b      	ldr	r3, [r1, #16]
 80055a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	bfb8      	it	lt
 80055b0:	4613      	movlt	r3, r2
 80055b2:	6033      	str	r3, [r6, #0]
 80055b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055b8:	4607      	mov	r7, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	b10a      	cbz	r2, 80055c2 <_printf_common+0x26>
 80055be:	3301      	adds	r3, #1
 80055c0:	6033      	str	r3, [r6, #0]
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	0699      	lsls	r1, r3, #26
 80055c6:	bf42      	ittt	mi
 80055c8:	6833      	ldrmi	r3, [r6, #0]
 80055ca:	3302      	addmi	r3, #2
 80055cc:	6033      	strmi	r3, [r6, #0]
 80055ce:	6825      	ldr	r5, [r4, #0]
 80055d0:	f015 0506 	ands.w	r5, r5, #6
 80055d4:	d106      	bne.n	80055e4 <_printf_common+0x48>
 80055d6:	f104 0a19 	add.w	sl, r4, #25
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	6832      	ldr	r2, [r6, #0]
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	42ab      	cmp	r3, r5
 80055e2:	dc26      	bgt.n	8005632 <_printf_common+0x96>
 80055e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055e8:	1e13      	subs	r3, r2, #0
 80055ea:	6822      	ldr	r2, [r4, #0]
 80055ec:	bf18      	it	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	0692      	lsls	r2, r2, #26
 80055f2:	d42b      	bmi.n	800564c <_printf_common+0xb0>
 80055f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055f8:	4649      	mov	r1, r9
 80055fa:	4638      	mov	r0, r7
 80055fc:	47c0      	blx	r8
 80055fe:	3001      	adds	r0, #1
 8005600:	d01e      	beq.n	8005640 <_printf_common+0xa4>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	68e5      	ldr	r5, [r4, #12]
 8005606:	6832      	ldr	r2, [r6, #0]
 8005608:	f003 0306 	and.w	r3, r3, #6
 800560c:	2b04      	cmp	r3, #4
 800560e:	bf08      	it	eq
 8005610:	1aad      	subeq	r5, r5, r2
 8005612:	68a3      	ldr	r3, [r4, #8]
 8005614:	6922      	ldr	r2, [r4, #16]
 8005616:	bf0c      	ite	eq
 8005618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800561c:	2500      	movne	r5, #0
 800561e:	4293      	cmp	r3, r2
 8005620:	bfc4      	itt	gt
 8005622:	1a9b      	subgt	r3, r3, r2
 8005624:	18ed      	addgt	r5, r5, r3
 8005626:	2600      	movs	r6, #0
 8005628:	341a      	adds	r4, #26
 800562a:	42b5      	cmp	r5, r6
 800562c:	d11a      	bne.n	8005664 <_printf_common+0xc8>
 800562e:	2000      	movs	r0, #0
 8005630:	e008      	b.n	8005644 <_printf_common+0xa8>
 8005632:	2301      	movs	r3, #1
 8005634:	4652      	mov	r2, sl
 8005636:	4649      	mov	r1, r9
 8005638:	4638      	mov	r0, r7
 800563a:	47c0      	blx	r8
 800563c:	3001      	adds	r0, #1
 800563e:	d103      	bne.n	8005648 <_printf_common+0xac>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005648:	3501      	adds	r5, #1
 800564a:	e7c6      	b.n	80055da <_printf_common+0x3e>
 800564c:	18e1      	adds	r1, r4, r3
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	2030      	movs	r0, #48	; 0x30
 8005652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005656:	4422      	add	r2, r4
 8005658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800565c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005660:	3302      	adds	r3, #2
 8005662:	e7c7      	b.n	80055f4 <_printf_common+0x58>
 8005664:	2301      	movs	r3, #1
 8005666:	4622      	mov	r2, r4
 8005668:	4649      	mov	r1, r9
 800566a:	4638      	mov	r0, r7
 800566c:	47c0      	blx	r8
 800566e:	3001      	adds	r0, #1
 8005670:	d0e6      	beq.n	8005640 <_printf_common+0xa4>
 8005672:	3601      	adds	r6, #1
 8005674:	e7d9      	b.n	800562a <_printf_common+0x8e>
	...

08005678 <_printf_i>:
 8005678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	7e0f      	ldrb	r7, [r1, #24]
 800567e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005680:	2f78      	cmp	r7, #120	; 0x78
 8005682:	4691      	mov	r9, r2
 8005684:	4680      	mov	r8, r0
 8005686:	460c      	mov	r4, r1
 8005688:	469a      	mov	sl, r3
 800568a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800568e:	d807      	bhi.n	80056a0 <_printf_i+0x28>
 8005690:	2f62      	cmp	r7, #98	; 0x62
 8005692:	d80a      	bhi.n	80056aa <_printf_i+0x32>
 8005694:	2f00      	cmp	r7, #0
 8005696:	f000 80d8 	beq.w	800584a <_printf_i+0x1d2>
 800569a:	2f58      	cmp	r7, #88	; 0x58
 800569c:	f000 80a3 	beq.w	80057e6 <_printf_i+0x16e>
 80056a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056a8:	e03a      	b.n	8005720 <_printf_i+0xa8>
 80056aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056ae:	2b15      	cmp	r3, #21
 80056b0:	d8f6      	bhi.n	80056a0 <_printf_i+0x28>
 80056b2:	a101      	add	r1, pc, #4	; (adr r1, 80056b8 <_printf_i+0x40>)
 80056b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056b8:	08005711 	.word	0x08005711
 80056bc:	08005725 	.word	0x08005725
 80056c0:	080056a1 	.word	0x080056a1
 80056c4:	080056a1 	.word	0x080056a1
 80056c8:	080056a1 	.word	0x080056a1
 80056cc:	080056a1 	.word	0x080056a1
 80056d0:	08005725 	.word	0x08005725
 80056d4:	080056a1 	.word	0x080056a1
 80056d8:	080056a1 	.word	0x080056a1
 80056dc:	080056a1 	.word	0x080056a1
 80056e0:	080056a1 	.word	0x080056a1
 80056e4:	08005831 	.word	0x08005831
 80056e8:	08005755 	.word	0x08005755
 80056ec:	08005813 	.word	0x08005813
 80056f0:	080056a1 	.word	0x080056a1
 80056f4:	080056a1 	.word	0x080056a1
 80056f8:	08005853 	.word	0x08005853
 80056fc:	080056a1 	.word	0x080056a1
 8005700:	08005755 	.word	0x08005755
 8005704:	080056a1 	.word	0x080056a1
 8005708:	080056a1 	.word	0x080056a1
 800570c:	0800581b 	.word	0x0800581b
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	602a      	str	r2, [r5, #0]
 8005718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800571c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005720:	2301      	movs	r3, #1
 8005722:	e0a3      	b.n	800586c <_printf_i+0x1f4>
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	6829      	ldr	r1, [r5, #0]
 8005728:	0606      	lsls	r6, r0, #24
 800572a:	f101 0304 	add.w	r3, r1, #4
 800572e:	d50a      	bpl.n	8005746 <_printf_i+0xce>
 8005730:	680e      	ldr	r6, [r1, #0]
 8005732:	602b      	str	r3, [r5, #0]
 8005734:	2e00      	cmp	r6, #0
 8005736:	da03      	bge.n	8005740 <_printf_i+0xc8>
 8005738:	232d      	movs	r3, #45	; 0x2d
 800573a:	4276      	negs	r6, r6
 800573c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005740:	485e      	ldr	r0, [pc, #376]	; (80058bc <_printf_i+0x244>)
 8005742:	230a      	movs	r3, #10
 8005744:	e019      	b.n	800577a <_printf_i+0x102>
 8005746:	680e      	ldr	r6, [r1, #0]
 8005748:	602b      	str	r3, [r5, #0]
 800574a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800574e:	bf18      	it	ne
 8005750:	b236      	sxthne	r6, r6
 8005752:	e7ef      	b.n	8005734 <_printf_i+0xbc>
 8005754:	682b      	ldr	r3, [r5, #0]
 8005756:	6820      	ldr	r0, [r4, #0]
 8005758:	1d19      	adds	r1, r3, #4
 800575a:	6029      	str	r1, [r5, #0]
 800575c:	0601      	lsls	r1, r0, #24
 800575e:	d501      	bpl.n	8005764 <_printf_i+0xec>
 8005760:	681e      	ldr	r6, [r3, #0]
 8005762:	e002      	b.n	800576a <_printf_i+0xf2>
 8005764:	0646      	lsls	r6, r0, #25
 8005766:	d5fb      	bpl.n	8005760 <_printf_i+0xe8>
 8005768:	881e      	ldrh	r6, [r3, #0]
 800576a:	4854      	ldr	r0, [pc, #336]	; (80058bc <_printf_i+0x244>)
 800576c:	2f6f      	cmp	r7, #111	; 0x6f
 800576e:	bf0c      	ite	eq
 8005770:	2308      	moveq	r3, #8
 8005772:	230a      	movne	r3, #10
 8005774:	2100      	movs	r1, #0
 8005776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800577a:	6865      	ldr	r5, [r4, #4]
 800577c:	60a5      	str	r5, [r4, #8]
 800577e:	2d00      	cmp	r5, #0
 8005780:	bfa2      	ittt	ge
 8005782:	6821      	ldrge	r1, [r4, #0]
 8005784:	f021 0104 	bicge.w	r1, r1, #4
 8005788:	6021      	strge	r1, [r4, #0]
 800578a:	b90e      	cbnz	r6, 8005790 <_printf_i+0x118>
 800578c:	2d00      	cmp	r5, #0
 800578e:	d04d      	beq.n	800582c <_printf_i+0x1b4>
 8005790:	4615      	mov	r5, r2
 8005792:	fbb6 f1f3 	udiv	r1, r6, r3
 8005796:	fb03 6711 	mls	r7, r3, r1, r6
 800579a:	5dc7      	ldrb	r7, [r0, r7]
 800579c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057a0:	4637      	mov	r7, r6
 80057a2:	42bb      	cmp	r3, r7
 80057a4:	460e      	mov	r6, r1
 80057a6:	d9f4      	bls.n	8005792 <_printf_i+0x11a>
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d10b      	bne.n	80057c4 <_printf_i+0x14c>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	07de      	lsls	r6, r3, #31
 80057b0:	d508      	bpl.n	80057c4 <_printf_i+0x14c>
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	6861      	ldr	r1, [r4, #4]
 80057b6:	4299      	cmp	r1, r3
 80057b8:	bfde      	ittt	le
 80057ba:	2330      	movle	r3, #48	; 0x30
 80057bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057c4:	1b52      	subs	r2, r2, r5
 80057c6:	6122      	str	r2, [r4, #16]
 80057c8:	f8cd a000 	str.w	sl, [sp]
 80057cc:	464b      	mov	r3, r9
 80057ce:	aa03      	add	r2, sp, #12
 80057d0:	4621      	mov	r1, r4
 80057d2:	4640      	mov	r0, r8
 80057d4:	f7ff fee2 	bl	800559c <_printf_common>
 80057d8:	3001      	adds	r0, #1
 80057da:	d14c      	bne.n	8005876 <_printf_i+0x1fe>
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295
 80057e0:	b004      	add	sp, #16
 80057e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e6:	4835      	ldr	r0, [pc, #212]	; (80058bc <_printf_i+0x244>)
 80057e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057ec:	6829      	ldr	r1, [r5, #0]
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80057f4:	6029      	str	r1, [r5, #0]
 80057f6:	061d      	lsls	r5, r3, #24
 80057f8:	d514      	bpl.n	8005824 <_printf_i+0x1ac>
 80057fa:	07df      	lsls	r7, r3, #31
 80057fc:	bf44      	itt	mi
 80057fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005802:	6023      	strmi	r3, [r4, #0]
 8005804:	b91e      	cbnz	r6, 800580e <_printf_i+0x196>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	f023 0320 	bic.w	r3, r3, #32
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	2310      	movs	r3, #16
 8005810:	e7b0      	b.n	8005774 <_printf_i+0xfc>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	f043 0320 	orr.w	r3, r3, #32
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	2378      	movs	r3, #120	; 0x78
 800581c:	4828      	ldr	r0, [pc, #160]	; (80058c0 <_printf_i+0x248>)
 800581e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005822:	e7e3      	b.n	80057ec <_printf_i+0x174>
 8005824:	0659      	lsls	r1, r3, #25
 8005826:	bf48      	it	mi
 8005828:	b2b6      	uxthmi	r6, r6
 800582a:	e7e6      	b.n	80057fa <_printf_i+0x182>
 800582c:	4615      	mov	r5, r2
 800582e:	e7bb      	b.n	80057a8 <_printf_i+0x130>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	6826      	ldr	r6, [r4, #0]
 8005834:	6961      	ldr	r1, [r4, #20]
 8005836:	1d18      	adds	r0, r3, #4
 8005838:	6028      	str	r0, [r5, #0]
 800583a:	0635      	lsls	r5, r6, #24
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	d501      	bpl.n	8005844 <_printf_i+0x1cc>
 8005840:	6019      	str	r1, [r3, #0]
 8005842:	e002      	b.n	800584a <_printf_i+0x1d2>
 8005844:	0670      	lsls	r0, r6, #25
 8005846:	d5fb      	bpl.n	8005840 <_printf_i+0x1c8>
 8005848:	8019      	strh	r1, [r3, #0]
 800584a:	2300      	movs	r3, #0
 800584c:	6123      	str	r3, [r4, #16]
 800584e:	4615      	mov	r5, r2
 8005850:	e7ba      	b.n	80057c8 <_printf_i+0x150>
 8005852:	682b      	ldr	r3, [r5, #0]
 8005854:	1d1a      	adds	r2, r3, #4
 8005856:	602a      	str	r2, [r5, #0]
 8005858:	681d      	ldr	r5, [r3, #0]
 800585a:	6862      	ldr	r2, [r4, #4]
 800585c:	2100      	movs	r1, #0
 800585e:	4628      	mov	r0, r5
 8005860:	f7fa fcbe 	bl	80001e0 <memchr>
 8005864:	b108      	cbz	r0, 800586a <_printf_i+0x1f2>
 8005866:	1b40      	subs	r0, r0, r5
 8005868:	6060      	str	r0, [r4, #4]
 800586a:	6863      	ldr	r3, [r4, #4]
 800586c:	6123      	str	r3, [r4, #16]
 800586e:	2300      	movs	r3, #0
 8005870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005874:	e7a8      	b.n	80057c8 <_printf_i+0x150>
 8005876:	6923      	ldr	r3, [r4, #16]
 8005878:	462a      	mov	r2, r5
 800587a:	4649      	mov	r1, r9
 800587c:	4640      	mov	r0, r8
 800587e:	47d0      	blx	sl
 8005880:	3001      	adds	r0, #1
 8005882:	d0ab      	beq.n	80057dc <_printf_i+0x164>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	079b      	lsls	r3, r3, #30
 8005888:	d413      	bmi.n	80058b2 <_printf_i+0x23a>
 800588a:	68e0      	ldr	r0, [r4, #12]
 800588c:	9b03      	ldr	r3, [sp, #12]
 800588e:	4298      	cmp	r0, r3
 8005890:	bfb8      	it	lt
 8005892:	4618      	movlt	r0, r3
 8005894:	e7a4      	b.n	80057e0 <_printf_i+0x168>
 8005896:	2301      	movs	r3, #1
 8005898:	4632      	mov	r2, r6
 800589a:	4649      	mov	r1, r9
 800589c:	4640      	mov	r0, r8
 800589e:	47d0      	blx	sl
 80058a0:	3001      	adds	r0, #1
 80058a2:	d09b      	beq.n	80057dc <_printf_i+0x164>
 80058a4:	3501      	adds	r5, #1
 80058a6:	68e3      	ldr	r3, [r4, #12]
 80058a8:	9903      	ldr	r1, [sp, #12]
 80058aa:	1a5b      	subs	r3, r3, r1
 80058ac:	42ab      	cmp	r3, r5
 80058ae:	dcf2      	bgt.n	8005896 <_printf_i+0x21e>
 80058b0:	e7eb      	b.n	800588a <_printf_i+0x212>
 80058b2:	2500      	movs	r5, #0
 80058b4:	f104 0619 	add.w	r6, r4, #25
 80058b8:	e7f5      	b.n	80058a6 <_printf_i+0x22e>
 80058ba:	bf00      	nop
 80058bc:	080067d5 	.word	0x080067d5
 80058c0:	080067e6 	.word	0x080067e6

080058c4 <__retarget_lock_acquire_recursive>:
 80058c4:	4770      	bx	lr

080058c6 <__retarget_lock_release_recursive>:
 80058c6:	4770      	bx	lr

080058c8 <memmove>:
 80058c8:	4288      	cmp	r0, r1
 80058ca:	b510      	push	{r4, lr}
 80058cc:	eb01 0402 	add.w	r4, r1, r2
 80058d0:	d902      	bls.n	80058d8 <memmove+0x10>
 80058d2:	4284      	cmp	r4, r0
 80058d4:	4623      	mov	r3, r4
 80058d6:	d807      	bhi.n	80058e8 <memmove+0x20>
 80058d8:	1e43      	subs	r3, r0, #1
 80058da:	42a1      	cmp	r1, r4
 80058dc:	d008      	beq.n	80058f0 <memmove+0x28>
 80058de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058e6:	e7f8      	b.n	80058da <memmove+0x12>
 80058e8:	4402      	add	r2, r0
 80058ea:	4601      	mov	r1, r0
 80058ec:	428a      	cmp	r2, r1
 80058ee:	d100      	bne.n	80058f2 <memmove+0x2a>
 80058f0:	bd10      	pop	{r4, pc}
 80058f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058fa:	e7f7      	b.n	80058ec <memmove+0x24>

080058fc <_realloc_r>:
 80058fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005900:	4680      	mov	r8, r0
 8005902:	4614      	mov	r4, r2
 8005904:	460e      	mov	r6, r1
 8005906:	b921      	cbnz	r1, 8005912 <_realloc_r+0x16>
 8005908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800590c:	4611      	mov	r1, r2
 800590e:	f7ff bc39 	b.w	8005184 <_malloc_r>
 8005912:	b92a      	cbnz	r2, 8005920 <_realloc_r+0x24>
 8005914:	f7ff fbca 	bl	80050ac <_free_r>
 8005918:	4625      	mov	r5, r4
 800591a:	4628      	mov	r0, r5
 800591c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005920:	f000 f81b 	bl	800595a <_malloc_usable_size_r>
 8005924:	4284      	cmp	r4, r0
 8005926:	4607      	mov	r7, r0
 8005928:	d802      	bhi.n	8005930 <_realloc_r+0x34>
 800592a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800592e:	d812      	bhi.n	8005956 <_realloc_r+0x5a>
 8005930:	4621      	mov	r1, r4
 8005932:	4640      	mov	r0, r8
 8005934:	f7ff fc26 	bl	8005184 <_malloc_r>
 8005938:	4605      	mov	r5, r0
 800593a:	2800      	cmp	r0, #0
 800593c:	d0ed      	beq.n	800591a <_realloc_r+0x1e>
 800593e:	42bc      	cmp	r4, r7
 8005940:	4622      	mov	r2, r4
 8005942:	4631      	mov	r1, r6
 8005944:	bf28      	it	cs
 8005946:	463a      	movcs	r2, r7
 8005948:	f7ff fb9a 	bl	8005080 <memcpy>
 800594c:	4631      	mov	r1, r6
 800594e:	4640      	mov	r0, r8
 8005950:	f7ff fbac 	bl	80050ac <_free_r>
 8005954:	e7e1      	b.n	800591a <_realloc_r+0x1e>
 8005956:	4635      	mov	r5, r6
 8005958:	e7df      	b.n	800591a <_realloc_r+0x1e>

0800595a <_malloc_usable_size_r>:
 800595a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800595e:	1f18      	subs	r0, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	bfbc      	itt	lt
 8005964:	580b      	ldrlt	r3, [r1, r0]
 8005966:	18c0      	addlt	r0, r0, r3
 8005968:	4770      	bx	lr
	...

0800596c <_init>:
 800596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596e:	bf00      	nop
 8005970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005972:	bc08      	pop	{r3}
 8005974:	469e      	mov	lr, r3
 8005976:	4770      	bx	lr

08005978 <_fini>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	bf00      	nop
 800597c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597e:	bc08      	pop	{r3}
 8005980:	469e      	mov	lr, r3
 8005982:	4770      	bx	lr
